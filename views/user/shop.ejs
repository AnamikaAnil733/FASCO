<%- include('../partials/user/header.ejs') %>

<main class="bg0 m-t-100 p-b-140">
    <div class="container shop-container">
        <!-- Breadcrumb -->
        <div class="bread-crumb flex-w p-l-25 p-r-15 p-t-30 p-lr-0-lg">
            <a href="/" class="stext-109 cl8 hov-cl1 trans-04">
                Home
                <i class="fa fa-angle-right m-l-9 m-r-10" aria-hidden="true"></i>
            </a>
            <span class="stext-109 cl4">
                Shop
            </span>
        </div>

        <div class="row m-t-30">
            <!-- Filter sidebar -->
            <div class="col-md-3">
                <div class="filter-sidebar p-t-0 p-r-15 p-lr-0-lg">
                    <!-- Search -->
<div class="filter-widget mb-4">
    <h4 class="mtext-112 cl2 p-b-27">Search Products</h4>
    <div class="search-wrap">
        <div class="input-group">
            <input type="text" 
                   class="form-control stext-106" 
                   id="searchInput" 
                   placeholder="Search products..."
                   value="<%= search || '' %>">
            <button class="btn btn-primary" id="searchButton">
                <i class="fa fa-search"></i>
            </button>
        </div>
    </div>
</div>
                    <!-- Categories -->
                    <div class="filter-widget mb-4">
                        <h4 class="mtext-112 cl2 p-b-27">Categories</h4>
                        <ul class="filter-list">
                            <li class="p-b-6">
                                <a href="/shop" class="filter-link stext-106 trans-04 <%= !category ? 'filter-link-active' : '' %>">
                                    All Products
                                </a>
                            </li>
                            <% categories.forEach(function(cat) { %>
                                <li class="p-b-6">
                                    <a href="/shop?category=<%= cat._id %>" 
                                       class="filter-link stext-106 trans-04 <%= category === cat._id.toString() ? 'filter-link-active' : '' %>">
                                        <%= cat.name %>
                                    </a>
                                </li>
                            <% }); %>
                        </ul>
                    </div>

                    <!-- Price Range -->
                    <div class="filter-widget mb-4">
                        <h4 class="mtext-112 cl2 p-b-27">Price Range</h4>
                        <div class="price-range-wrap">
                            <div class="price-range">
                                <input type="range" class="form-range" min="0" max="100000" step="100" value="<%= maxPrice || 5000 %>" id="priceRange">
                            </div>
                            <div class="price-input mt-2">
                                <div class="d-flex justify-content-between align-items-center w-100">
                                    <span class="stext-106 cl6">₹0</span>
                                    <span class="stext-106 cl2">₹<span id="priceValue"><%= maxPrice || 5000 %></span></span>
                                    <span class="stext-106 cl6">₹100000</span>
                                </div>
                            </div>
                            <button class="flex-c-m stext-107 cl6 size-301 bor7 p-lr-15 hov-tag1 trans-04 m-t-10" 
                                    id="applyPriceFilter">
                                Apply Filter
                            </button>
                        </div>
                    </div>

                    <!-- Sort By -->
                    <div class="filter-widget">
                        <h4 class="mtext-112 cl2 p-b-27">Sort By</h4>
                        <select class="form-select stext-106 cl6" id="sortProducts">
                            <option value="default">Default Sorting</option>
                            <option value="name_asc">Name: A to Z</option>
                            <option value="name_desc">Name: Z to A</option>
                            <option value="price_asc">Price: Low to High</option>
                            <option value="price_desc">Price: High to Low</option>
                            <option value="newest">Newest First</option>
                        </select>
                    </div>
                    <div class="reset-filters text-center mt-4">
                        <button id="resetAllFilters" class="btn btn-outline-primary w-100">
                            <i class="fas fa-undo me-2"></i>Reset All Filters
                        </button>
                    </div>
                </div>
            </div>

            <!-- Product grid -->
            <div class="col-md-9">
                <div class="row">
                    <% if(products.length > 0) { %>
                        <% products.forEach((product) => { %>
                            <div class="col-sm-6 col-md-4 p-b-35 isotope-item">
                                <div class="block2">
                                    <div class="block2-pic hov-img0 position-relative">
                                        <% if (product.variants && product.variants.length > 0 && product.variants[0].images && product.variants[0].images.length > 0) { %>
                                            <img src="/uploads/product-images/<%= product.variants[0].images[0] %>" alt="<%= product.productName %>" class="product-image">
                                        <% } else { %>
                                            <img src="/images/no-image.png" alt="No image available" class="product-image">
                                        <% } %>
                                        <button class="add-to-wishlist-icon" data-product-id="<%= product._id %>">
                                            <i class="<%= wishlistProducts && wishlistProducts.includes(product._id.toString()) ? 'fas' : 'far' %> fa-heart"></i>
                                        </button>
                                        <a href="/product/<%= product._id %>" class="block2-btn flex-c-m stext-103 cl2 size-102 bg0 bor2 hov-btn1 p-lr-15 trans-04">
                                            View Details
                                        </a>
                                    </div>

                                    <div class="block2-txt flex-w flex-t p-t-14">
                                        <div class="block2-txt-child1 flex-col-l">
                                            <a href="/product/<%= product._id %>" class="stext-104 cl4 hov-cl1 trans-04 js-name-b2 p-b-6">
                                                <%= product.productName %>
                                            </a>
                                
                                            <div class="price-section">
                                                <div class="current-price">₹<%= product.salesPrice %></div>
                                                <% if (product.regularPrice > product.salesPrice) { %>
                                                    <div class="original-price">₹<%= product.regularPrice %></div>
                                                    <div class="discount-badge">
                                                        <%= Math.round((product.regularPrice - product.salesPrice) / product.regularPrice * 100) %>% OFF
                                                    </div>
                                                <% } %>
                                            </div>
                                            <% if (product.variants[0].quantity == 0) { %>
                                                <p class="out-of-stock">Out of Stock</p>
                                            <% } else { %>
                                                <button class="add-to-cart-btn flex-c-m stext-103 cl2 size-102 bg0 bor2 hov-btn1 p-lr-15 trans-04 mt-2" 
                                                        data-product-id="<%= product._id %>">
                                                    Add to Cart
                                                </button>
                                            <% } %>
                                            <% if (product.variants && product.variants.length > 0) { %>
                                                <div class="variant-colors mt-2">
                                                    <% product.variants.forEach(variant => { %>
                                                        <span class="color-dot" style="background-color: <%= variant.color %>" title="<%= variant.color %>"></span>
                                                    <% }); %>
                                                </div>
                                            <% } %>
                                          
                                        </div>
                                    </div>
                                </div>
                            </div>
                        <% }) %>
                    <% } else { %>
                        <div class="col-12 text-center">
                            <h3 class="mtext-111 cl2">No products found</h3>
                        </div>
                    <% } %>
                </div>
            </div>
        </div>
        <div class="d-flex justify-content-center">
            <nav aria-label="Page navigation">
                <ul class="pagination">
                    <% for(let i=1; i<=totalpages; i++) { %>
                        <li class="page-item <%=(i===currentPage) ? 'active' : '' %>">
                            <a class="page-link pagination-link" data-page="<%=i%>" href="#"><%=i%></a>
                        </li>
                    <% } %>
                </ul>
            </nav>
        </div>
    </main>
    
    </div>
  
<style>
    /* Shop Page Styles */
    .shop-container {
        background-color: #f8f9fa;
        padding: 2rem 0;
    }

    /* Filter Sidebar */
    .filter-sidebar {
        background: #fff;
        padding: 1.5rem;
        border-radius: 12px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.05);
    }

    .filter-widget {
        margin-bottom: 2rem;
    }

    .filter-widget h4 {
        color: #333;
        font-size: 1.1rem;
        margin-bottom: 1rem;
        padding-bottom: 0.5rem;
        border-bottom: 2px solid #e9ecef;
    }

    /* Search Bar */
    .search-wrap {
        margin-bottom: 1.5rem;
    }

    .search-wrap .input-group {
        display: flex;
        gap: 8px;
    }

    .search-wrap input {
        border: 1px solid #dee2e6;
        padding: 0.6rem 1rem;
        border-radius: 8px;
        flex-grow: 1;
        transition: all 0.3s ease;
    }

    .search-wrap input:focus {
        border-color: #6c757d;
        box-shadow: 0 0 0 0.2rem rgba(108, 117, 125, 0.25);
        outline: none;
    }

    .search-wrap .btn {
        padding: 0.6rem 1.2rem;
        border-radius: 8px;
        background-color: #6c757d;
        border: none;
        transition: all 0.3s ease;
    }

    .search-wrap .btn:hover {
        background-color: #5a6268;
        transform: translateY(-1px);
    }

    /* Filter List */
    .filter-list {
        list-style: none;
        padding: 0;
        margin: 0;
    }

    .filter-link {
        color: #6c757d;
        text-decoration: none;
        display: block;
        padding: 0.5rem 0;
        transition: all 0.3s ease;
        font-size: 0.95rem;
    }

    .filter-link:hover,
    .filter-link-active {
        color: #007bff;
        transform: translateX(5px);
    }

    /* Price Range */
    .price-range-wrap {
        padding: 0.5rem 0;
    }

    .form-range {
        width: 100%;
        height: 1.5rem;
        padding: 0;
        background: transparent;
        -webkit-appearance: none;
    }

    .form-range::-webkit-slider-thumb {
        -webkit-appearance: none;
        width: 18px;
        height: 18px;
        border-radius: 50%;
        background: #007bff;
        cursor: pointer;
        margin-top: -7px;
    }

    .form-range::-webkit-slider-runnable-track {
        width: 100%;
        height: 4px;
        background: #e9ecef;
        border-radius: 2px;
    }

    .price-input {
        margin-top: 1rem;
    }

    .price-input span {
        font-size: 0.9rem;
        color: #6c757d;
    }

    /* Sort Dropdown */
    .form-select {
        width: 100%;
        padding: 0.6rem 1rem;
        border: 1px solid #dee2e6;
        border-radius: 8px;
        color: #495057;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .form-select:focus {
        border-color: #80bdff;
        box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
    }

    /* Reset Button */
    #resetAllFilters {
        width: 100%;
        padding: 0.8rem;
        border: 2px solid #007bff;
        background: transparent;
        color: #007bff;
        border-radius: 8px;
        font-weight: 500;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 0.5rem;
    }

    #resetAllFilters:hover {
        background: #007bff;
        color: white;
        transform: translateY(-2px);
        box-shadow: 0 4px 6px rgba(0, 123, 255, 0.2);
    }

    #resetAllFilters i {
        transition: transform 0.3s ease;
    }

    #resetAllFilters:hover i {
        transform: rotate(-180deg);
    }

    /* Product Grid */
    .block2 {
        background: white;
        border-radius: 12px;
        overflow: hidden;
        transition: all 0.3s ease;
        box-shadow: 0 2px 10px rgba(0,0,0,0.05);
        height: 100%;
    }

    .block2:hover {
        transform: translateY(-5px);
        box-shadow: 0 5px 15px rgba(0,0,0,0.1);
    }

    .block2-pic {
        position: relative;
        overflow: hidden;
    }

    .product-image {
        width: 100%;
        height: 280px;
        object-fit: cover;
        transition: transform 0.3s ease;
    }

    .block2:hover .product-image {
        transform: scale(1.05);
    }

    .block2-btn {
        position: absolute;
        bottom: -50px;
        left: 50%;
        transform: translateX(-50%);
        transition: all 0.3s ease;
        background: white;
        color: #333;
        padding: 0.8rem 1.5rem;
        border-radius: 25px;
        font-weight: 500;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }

    .block2-pic:hover .block2-btn {
        bottom: 20px;
    }

    .block2-txt {
        padding: 1.2rem;
    }

    .js-name-b2 {
        color: #333;
        font-weight: 600;
        text-decoration: none;
        display: block;
        margin-bottom: 0.5rem;
        transition: color 0.3s ease;
    }

    .js-name-b2:hover {
        color: #007bff;
    }

    .stext-105 {
        color: #007bff;
        font-weight: 700;
        font-size: 1.1rem;
    }

    /* Variant Colors */
    .variant-colors {
        display: flex;
        gap: 6px;
        margin-top: 0.8rem;
    }

    .color-dot {
        width: 14px;
        height: 14px;
        border-radius: 50%;
        border: 2px solid white;
        box-shadow: 0 0 0 1px #dee2e6;
        transition: transform 0.3s ease;
    }

    .color-dot:hover {
        transform: scale(1.2);
    }

      /* Pagination Styling */
   .pagination {
        margin: 2rem 0;
        gap: 0.5rem;
    }

    .page-item .page-link {
        border: none;
        padding: 0.5rem 1rem;
        color: var(--text-secondary);
        border-radius: 8px;
        transition: all 0.3s ease;
    }

    .page-item:not(.active) .page-link:hover {
        background: black;
        color: rgb(29, 97, 223);
    }

    .page-item.active .page-link {
        background: var(--primary-color);
        color:rgb(44, 192, 214);
    }


    /* Responsive Adjustments */
    @media (max-width: 768px) {
        .filter-sidebar {
            margin-bottom: 2rem;
        }

        .block2 {
            margin-bottom: 1.5rem;
        }
    }

    .bg4 { background-color: #6c757d; }
    .hov-btn4:hover { background-color: #5a6268; }
    
    .btn-group {
        display: flex;
        gap: 8px;
    }
    
    .btn-addcart-b2,
    .js-addcart-detail {
        display: none;
    }
    
    .add-to-wishlist i.fas {
        color: #dc3545;
    }
    
    .add-to-wishlist i.far {
        color: inherit;
    }
    
    .position-relative {
        position: relative;
    }
    
    .add-to-wishlist-icon {
        position: absolute;
        top: 10px;
        right: 10px;
        background: rgba(255, 255, 255, 0.9);
        border: none;
        border-radius: 50%;
        width: 35px;
        height: 35px;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: all 0.3s ease;
        z-index: 1;
    }
    
    .add-to-wishlist-icon:hover {
        transform: scale(1.1);
    }
    
    .add-to-wishlist-icon i {
        font-size: 18px;
    }
    
    .add-to-wishlist-icon i.fas {
        color: #dc3545;
    }
    
    .add-to-wishlist-icon i.far {
        color: #666;
    }

    /* Price Section Styling */
    .price-section {
        display: flex;
        align-items: center;
        gap: 10px;
        margin: 10px 0;
    }

    .current-price {
        font-size: 1.25rem;
        font-weight: 600;
        color: #2c3e50;
    }

    .original-price {
        font-size: 1rem;
        color: #95a5a6;
        text-decoration: line-through;
        margin-left: 8px;
    }

    .discount-badge {
        background-color: #e74c3c;
        color: white;
        padding: 4px 8px;
        border-radius: 4px;
        font-size: 0.875rem;
        font-weight: 500;
        margin-left: auto;
        animation: pulse 2s infinite;
    }
    .out-of-stock {
        margin: 0;
        color: #dc2626;
        font-weight: 500;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .out-of-stock::before {
        content: "⚠️";
    }

    @keyframes pulse {
        0% {
            transform: scale(1);
        }
        50% {
            transform: scale(1.05);
        }
        100% {
            transform: scale(1);
        }
    }

    /* Hover effect for price section */
    .price-section:hover .current-price {
        color: #16a085;
        transition: color 0.3s ease;
    }

    .price-section:hover .discount-badge {
        background-color: #c0392b;
        transition: background-color 0.3s ease;
    }

     /* Add to Cart Button Styles */
     .add-to-cart-btn {
        width: 100%;
        background-color: #fff;
        border: 1px solid #333;
        color: #333;
        transition: all 0.3s ease;
        margin-top: 10px;
        padding: 8px 15px;
        border-radius: 4px;
        cursor: pointer;
    }

    .add-to-cart-btn:hover {
        background-color: #333;
        color: #fff;
    }

    .out-of-stock {
        color: #dc3545;
        font-weight: 600;
        margin-top: 10px;
    }


    /* Toast notification styles */
    .colored-toast.swal2-icon-success {
        background-color: #a5dc86 !important;
        color: white !important;
    }

    .colored-toast.swal2-icon-error {
        background-color: #f27474 !important;
        color: white !important;
    }

    .colored-toast .swal2-title {
        color: white !important;
    }

    .colored-toast .swal2-close {
        color: white !important;
    }

    .colored-toast .swal2-html-container {
        color: white !important;
    }

    .swal2-container {
        z-index: 9999;
    }

    .swal2-popup.swal2-toast {
        padding: 0.5em 1em;
        margin-top: 15px;
        margin-right: 15px;
        box-shadow: 0 0 10px rgba(0,0,0,0.1);
        border-radius: 8px;
    }
</style>
    
<script>
    // Price Range Slider
    const priceRange = document.getElementById('priceRange');
    const priceValue = document.getElementById('priceValue');

    priceRange.addEventListener('input', function() {
        priceValue.textContent = this.value;
    });

    // Apply Price Filter
    document.getElementById('applyPriceFilter').addEventListener('click', function() {
        const currentUrl = new URL(window.location.href);
        
        // Set price range
        currentUrl.searchParams.set('maxPrice', priceRange.value);
        
        // Preserve category if exists
        const category = currentUrl.searchParams.get('category');
        if (category) {
            currentUrl.searchParams.set('category', category);
        }
        
        // Preserve sort if exists
        const sort = currentUrl.searchParams.get('sort');
        if (sort) {
            currentUrl.searchParams.set('sort', sort);
        }
        
        window.location.href = currentUrl.toString();
    });

    // Sort Products
    document.getElementById('sortProducts').addEventListener('change', function() {
        const currentUrl = new URL(window.location.href);
        const value = this.value;
        
        if (value === 'default') {
            currentUrl.searchParams.delete('sort');
        } else {
            currentUrl.searchParams.set('sort', value);
        }
        
        window.location.href = currentUrl.toString();
    });

    // Set initial values from URL
    window.addEventListener('load', function() {
        const currentUrl = new URL(window.location.href);
        
        // Set price range if in URL
        const maxPrice = currentUrl.searchParams.get('maxPrice');
        if (maxPrice) {
            priceRange.value = maxPrice;
            priceValue.textContent = maxPrice;
        }
        
        // Set sort selection if in URL
        const sort = currentUrl.searchParams.get('sort');
        if (sort) {
            document.getElementById('sortProducts').value = sort;
        }
    });

    // Search Products
    document.getElementById('searchButton').addEventListener('click', function() {
        const searchQuery = document.getElementById('searchInput').value.trim();
        const currentUrl = new URL(window.location.href);
        
        // Remove existing search parameter
        currentUrl.searchParams.delete('search');
        
        // Add new search parameter if not empty
        if (searchQuery) {
            currentUrl.searchParams.set('search', searchQuery);
        }
        
        // Preserve other parameters (but don't duplicate them)
        const category = currentUrl.searchParams.get('category');
        const maxPrice = currentUrl.searchParams.get('maxPrice');
        const sort = currentUrl.searchParams.get('sort');
        
        if (category) currentUrl.searchParams.set('category', category);
        if (maxPrice) currentUrl.searchParams.set('maxPrice', maxPrice);
        if (sort) currentUrl.searchParams.set('sort', sort);
        
        console.log('Navigating to:', currentUrl.toString());
        window.location.href = currentUrl.toString();
    });

    // Handle Enter key in search input
    document.getElementById('searchInput').addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            document.getElementById('searchButton').click();
        }
    });
    document.addEventListener('DOMContentLoaded', function () {
    initializeAddToCartButtons();
    initializePagination();
    initializeWishlistButtons();
});

// Function to handle Add to Cart buttons
function initializeAddToCartButtons() {
    console.log('Initializing Add to Cart buttons');

    document.querySelectorAll('.add-to-cart-btn').forEach(button => {
        button.removeEventListener('click', addToCartHandler); // Remove previous listeners
        button.addEventListener('click', addToCartHandler);    // Add fresh event listener
    });
}

//  Function that handles Add to Cart logic
async function addToCartHandler(event) {
    event.preventDefault();
    console.log('Add to Cart button clicked');

    const productId = this.dataset.productId;

    try {
        const response = await fetch('/cart/add', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                productId: productId,
                quantity: 1,
                variantIndex: 0
            })
        });

        const auth = await fetch('/check-auth');
        const data = await auth.json();
        console.log('Auth check response:', data);

        if (!data.isLoggedIn) {
            Swal.fire({
                title: 'Not Logged In',
                text: 'Please log in to add items to your cart',
                icon: 'info',
                showCancelButton: true,
                confirmButtonText: 'Login',
                cancelButtonText: 'Cancel',
                confirmButtonColor: '#4f46e5',
                cancelButtonColor: '#6b7280',
                customClass: {
                    confirmButton: 'swal2-confirm btn-primary',
                    cancelButton: 'swal2-cancel btn-secondary'
                }
            }).then((result) => {
                if (result.isConfirmed) {
                    window.location.href = '/login';
                }
            });
            return;
        }

        const responseData = await response.json(); // Get response data

        if (response.ok) {
            Swal.fire({
                icon: 'success',
                title: 'Success',
                text: 'Product added to cart!',
                showConfirmButton: false,
                timer: 1500
            });
            updateCartCount();
        } else {
            throw new Error(responseData.message || 'Failed to add product to cart');
        }
    } catch (error) {
        console.error('Error adding to cart:', error);
        Swal.fire({
            icon: 'error',
            title: 'Oops...',
            text: error.message || 'Something went wrong!'
        });
    }
}

// Function to handle pagination
function initializePagination() {
    document.querySelectorAll('.pagination-link').forEach(link => {
        link.addEventListener('click', async function (e) {
            e.preventDefault();
            const page = this.dataset.page;

            const url = new URL(window.location.href);
            const params = new URLSearchParams(url.search);
            params.set('page', page);

            const fetchURL = `/shop?${params.toString()}`;

            try {
                const response = await fetch(fetchURL);
                const data = await response.text();

                const parser = new DOMParser();
                const doc = parser.parseFromString(data, 'text/html');

                const productGrid = document.querySelector('.col-md-9 .row');
                const newProductGrid = doc.querySelector('.col-md-9 .row');
                productGrid.innerHTML = newProductGrid.innerHTML;

                document.querySelectorAll('.page-item').forEach(item => {
                    item.classList.remove('active');
                });
                const activePageItem = document.querySelector(`[data-page="${page}"]`).parentElement;
                activePageItem.classList.add('active');

                window.history.pushState({}, '', fetchURL);

                initializeAddToCartButtons(); // Reinitialize after pagination
                initializeWishlistButtons();  // If needed

                productGrid.scrollIntoView({ behavior: 'smooth' });
            } catch (error) {
                console.error('Error fetching products:', error);
            }
        });
    });
}

//  Reset all filters
document.getElementById('resetAllFilters').addEventListener('click', function () {
    Swal.fire({
        title: 'Resetting Filters',
        text: 'Please wait...',
        allowOutsideClick: false,
        showConfirmButton: false,
        willOpen: () => {
            Swal.showLoading();
        }
    });

    // Reset all filter inputs
    document.querySelectorAll('input[type="checkbox"]').forEach(checkbox => {
        checkbox.checked = false;
    });

    // Reset price range
    const priceRange = document.querySelector('input[type="range"]');
    if (priceRange) {
        priceRange.value = priceRange.max;
    }

    // Reset search input
    const searchInput = document.querySelector('input[type="search"]');
    if (searchInput) {
        searchInput.value = '';
    }

    // Reset sort dropdown
    const sortSelect = document.querySelector('select[name="sort"]');
    if (sortSelect) {
        sortSelect.value = 'default';
    }

    // Reset URL parameters and reload page
    window.location.href = '/shop';
});

function initializeWishlistButtons() {
    console.log('Initializing Wishlist buttons');

    document.querySelectorAll('.add-to-wishlist-icon').forEach(button => {
        button.removeEventListener('click', wishlistHandler);
        button.addEventListener('click', wishlistHandler);
    });
}

// Wishlist Handler (Fix for Immediate Update)
async function wishlistHandler(event) {
    event.preventDefault();
    const button = this;
    const productId = button.dataset.productId;
    const icon = button.querySelector('i');

    try {
        const isInWishlist = icon.classList.contains('fas'); // Check if already in wishlist
        let response;

        if (isInWishlist) {
            // Remove from wishlist
            response = await fetch(`/wishlist/remove/${productId}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json'
                }
            });
        } else {
            // Add to wishlist
            response = await fetch('/wishlist/add', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ productId })
            });
        }

        const responseData = await response.json();

        if (response.ok) {
        
            icon.classList.toggle('far', isInWishlist);  // Unfilled heart (remove)
            icon.classList.toggle('fas', !isInWishlist); // Filled heart (add)
            icon.style.color = isInWishlist ? '#000' : 'red'; // Update color immediately

            updateWishlistCount(); // Update wishlist count dynamically

            // Show success message
            Swal.fire({
                toast: true,
                icon: 'success',
                title: isInWishlist ? 'Removed from wishlist' : 'Added to wishlist',
                position: 'top-end',
                showConfirmButton: false,
                timer: 1500
            });
        } else {
            throw new Error(responseData.message || 'Failed to update wishlist');
        }
    } catch (error) {
        console.error('Wishlist Error:', error);
        Swal.fire({
            icon: 'error',
            title: 'Oops...',
            text: error.message || 'Something went wrong! Please try again.'
        });
    }
}

</script>


<%- include('../partials/user/footer.ejs') %>
