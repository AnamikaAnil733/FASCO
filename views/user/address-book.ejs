<%- include("../partials/user/header.ejs") %>

<style>
    /* Modern CSS Reset and Variables */
    :root {
        --primary-color: #4f46e5;
        --primary-hover: #4338ca;
        --secondary-color: #64748b;
        --danger-color: #ef4444;
        --success-color: #22c55e;
        --background-color: #f8fafc;
        --card-background: #ffffff;
        --text-primary: #1e293b;
        --text-secondary: #64748b;
        --border-color: #e2e8f0;
        --shadow-sm: 0 1px 2px 0 rgb(0 0 0 / 0.05);
        --shadow-md: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
        --shadow-lg: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);
        --radius-sm: 0.375rem;
        --radius-md: 0.5rem;
        --radius-lg: 0.75rem;
        --header-height: 80px;
        --footer-height: 60px;
        --content-spacing: 6rem;
    }

    /* Main Layout with proper spacing */
    body {
        min-height: 100vh;
        display: flex;
        flex-direction: column;
    }

    main.main-content {
        flex: 1;
        min-height: calc(100vh - var(--header-height) - var(--footer-height));
        background-color: var(--background-color);
        padding: var(--content-spacing) 0;
        margin-top: var(--header-height);
        margin-bottom: var(--content-spacing);
    }

    /* Responsive adjustments */
    @media (max-width: 768px) {
        :root {
            --content-spacing: 4rem;
        }
    }

    @media (max-width: 480px) {
        :root {
            --content-spacing: 3rem;
        }
    }

    /* Main Layout */
    .addresses-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 0 1.5rem;
    }

    /* Modern Page Title */
    .page-header {
        margin-bottom: 3rem;
        display: flex;
        justify-content: space-between;
        align-items: center;
        flex-wrap: wrap;
        gap: 1rem;
    }

    .page-title {
        color: var(--text-primary);
        font-size: 2rem;
        font-weight: 700;
        margin: 0;
        position: relative;
        display: inline-block;
    }

    .page-title::after {
        content: '';
        position: absolute;
        bottom: -0.5rem;
        left: 0;
        width: 2.5rem;
        height: 0.25rem;
        background: var(--primary-color);
        border-radius: var(--radius-sm);
    }

    /* Grid Layout */
    .addresses-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
        gap: 1.5rem;
        margin-top: 2rem;
    }

    /* Responsive Design */
    @media (max-width: 768px) {
        main.main-content {
            padding: 3rem 0;
        }

        .addresses-container {
            padding: 0 1rem;
        }

        .page-title {
            font-size: 1.75rem;
        }

        .addresses-grid {
            grid-template-columns: 1fr;
        }
    }

    @media (max-width: 480px) {
        .page-header {
            flex-direction: column;
            align-items: flex-start;
            gap: 1.5rem;
        }
    }

    /* Address Card Styles */
    .address-card {
        background: var(--card-background);
        border-radius: var(--radius-md);
        padding: 1.5rem;
        box-shadow: var(--shadow-md);
        transition: all 0.3s ease;
        border: 1px solid var(--border-color);
        position: relative;
        overflow: hidden;
    }

    .address-card:hover {
        transform: translateY(-4px);
        box-shadow: var(--shadow-lg);
    }

    .address-type {
        display: inline-block;
        padding: 0.35rem 1rem;
        border-radius: var(--radius-sm);
        background: var(--secondary-color);
        color: var(--text-primary);
        font-size: 0.875rem;
        font-weight: 500;
        margin-bottom: 1rem;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .address-details {
        color: var(--text-secondary);
        line-height: 1.6;
    }

    .address-details p {
        margin: 0.5rem 0;
    }

    .address-details strong {
        color: var(--text-primary);
        font-size: 1.1rem;
    }

    .address-actions {
        display: flex;
        gap: 0.75rem;
        margin-top: 1.5rem;
    }

    .btn {
        padding: 0.6rem 1.2rem;
        border-radius: var(--radius-sm);
        font-size: 0.875rem;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.3s ease;
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        border: none;
    }

    .btn i {
        font-size: 1rem;
    }

    .btn-edit {
        background: var(--primary-color);
        color: white;
    }

    .btn-edit:hover {
        background: var(--primary-hover);
    }

    .btn-delete {
        background: white;
        color: var(--danger-color);
        border: 1px solid var(--danger-color);
    }

    .btn-delete:hover {
        background: var(--danger-color);
        color: white;
    }

    .add-address-btn {
        background: var(--primary-color);
        color: white;
        padding: 0.75rem 1.5rem;
        border-radius: var(--radius-md);
        font-weight: 500;
        border: none;
        cursor: pointer;
        transition: all 0.3s ease;
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        box-shadow: var(--shadow-sm);
    }

    .add-address-btn:hover {
        transform: translateY(-2px);
        box-shadow: var(--shadow-md);
    }

    .add-address-btn i {
        font-size: 1.2rem;
    }

    /* Modal Styles */
    .modal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        backdrop-filter: blur(4px);
        z-index: 1000;
    }

    .modal.active {
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .modal-content {
        background: white;
        width: 90%;
        max-width: 600px;
        padding: 2rem;
        border-radius: var(--radius-md);
        position: relative;
        box-shadow: var(--shadow-lg);
        max-height: 90vh;
        overflow-y: auto;
    }

    .close-modal {
        position: absolute;
        top: 1rem;
        right: 1rem;
        font-size: 1.5rem;
        background: none;
        border: none;
        cursor: pointer;
        color: var(--text-secondary);
        transition: color 0.3s ease;
        width: 32px;
        height: 32px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .close-modal:hover {
        color: var(--text-primary);
        background: var(--background-color);
    }

    .modal h3 {
        color: var(--text-primary);
        font-size: 1.5rem;
        font-weight: 600;
        margin-bottom: 1.5rem;
    }

    .form-group {
        margin-bottom: 1.5rem;
    }

    .form-label {
        display: block;
        margin-bottom: 0.5rem;
        color: var(--text-secondary);
        font-weight: 500;
        font-size: 0.9rem;
    }

    .form-control {
        width: 100%;
        padding: 0.75rem 1rem;
        border: 1px solid var(--border-color);
        border-radius: var(--radius-sm);
        font-size: 1rem;
        transition: all 0.3s ease;
        background: var(--background-color);
    }

    .form-control:focus {
        outline: none;
        border-color: var(--primary-color);
        box-shadow: 0 0 0 3px rgba(75, 108, 183, 0.1);
        background: white;
    }

    .alert {
        padding: 1rem;
        margin-bottom: 1rem;
        border-radius: var(--radius-sm);
        font-size: 0.9rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .alert i {
        font-size: 1.1rem;
    }

    .alert-success {
        background: var(--success-color);
        color: white;
        border: 1px solid var(--success-color);
    }

    .alert-danger {
        background: var(--danger-color);
        color: white;
        border: 1px solid var(--danger-color);
    }

    .no-addresses {
        text-align: center;
        padding: 3rem;
        background: var(--background-color);
        border-radius: var(--radius-md);
        color: var(--text-secondary);
    }

    .no-addresses i {
        font-size: 3rem;
        color: var(--text-secondary);
        margin-bottom: 1rem;
    }

    /* Validation Styles */
    .form-control.error {
        border-color: var(--danger-color);
        background-color: #fff5f5;
    }

    .error-message {
        color: var(--danger-color);
        font-size: 0.8rem;
        margin-top: 0.25rem;
        display: none;
    }

    .error-message.show {
        display: block;
    }
</style>

<main class="main-content">
    <div class="addresses-container">
        <div class="page-header">
            <h2 class="page-title">My Addresses</h2>
            <button class="add-address-btn" onclick="openAddAddressModal()">
                <i class="fas fa-plus"></i> Add New Address
            </button>
        </div>

        <div class="addresses-grid">
            <% if (addresses && addresses.length > 0) { %>
                <% addresses.forEach(address => { %>
                    <div class="address-card" data-id="<%= address._id %>">
                        <span class="address-type"><%= address.addressType %></span>
                        <div class="address-details">
                            <p><strong><%= address.name %></strong></p>
                            <p><i class="fas fa-map-marker-alt"></i> <%= address.landMark %></p>
                            <p><%= address.city %>, <%= address.state %> - <%= address.pincode %></p>
                            <p><i class="fas fa-phone"></i> <%= address.phone %></p>
                            <% if (address.altPhone) { %>
                                <p><i class="fas fa-phone-alt"></i> <%= address.altPhone %></p>
                            <% } %>
                        </div>
                        <div class="address-actions">
                            <button class="btn btn-edit" onclick="openEditAddressModal('<%= address._id %>')">
                                <i class="fas fa-edit"></i> Edit
                            </button>
                            <button class="btn btn-delete" onclick="deleteAddress('<%= address._id %>')">
                                <i class="fas fa-trash"></i> Delete
                            </button>
                        </div>
                    </div>
                <% }); %>
            <% } else { %>
                <div class="no-addresses">
                    <i class="fas fa-map-marker-alt"></i>
                    <p>No addresses found. Add your first address!</p>
                </div>
            <% } %>
        </div>
    </div>
</main>

<!-- Address Modal -->
<div class="modal" id="addressModal">
    <div class="modal-content">
        <button class="close-modal" onclick="closeAddressModal()">×</button>
        <h3 id="modalTitle">Add New Address</h3>
        <div class="alert alert-success d-none" id="successAlert">
            <i class="fas fa-check-circle"></i>
            <span></span>
        </div>
        <div class="alert alert-danger d-none" id="errorAlert">
            <i class="fas fa-exclamation-circle"></i>
            <span></span>
        </div>
        <form id="addressForm">
            <div class="form-group">
                <label class="form-label">Address Type</label>
                <input type="text" class="form-control" name="addressType" required placeholder="Home, Office, etc.">
            </div>
            <div class="form-group">
                <label class="form-label">Full Name</label>
                <input type="text" class="form-control" name="name" required>
            </div>
            <div class="form-group">
                <label class="form-label">Landmark</label>
                <input type="text" class="form-control" name="landMark" required>
            </div>
            <div class="form-group">
                <label class="form-label">City</label>
                <input type="text" class="form-control" name="city" required>
            </div>
            <div class="form-group">
                <label class="form-label">State</label>
                <input type="text" class="form-control" name="state" required>
            </div>
            <div class="form-group">
                <label class="form-label">Pincode</label>
                <input type="text" class="form-control" name="pincode" required>
            </div>
            <div class="form-group">
                <label class="form-label">Phone Number</label>
                <input type="tel" class="form-control" name="phone" required>
            </div>
            <div class="form-group">
                <label class="form-label">Alternative Phone Number</label>
                <input type="tel" class="form-control" name="altPhone" required>
            </div>
            <button type="submit" class="add-address-btn w-100">Save Address</button>
        </form>
    </div>
</div>

<script>
    let currentAddressId = null;
    const modal = document.getElementById('addressModal');
    const form = document.getElementById('addressForm');
    const successAlert = document.getElementById('successAlert');
    const errorAlert = document.getElementById('errorAlert');

    // Validation rules
    const validationRules = {
        addressType: {
            required: true,
            minLength: 2,
            maxLength: 20,
            pattern: /^[a-zA-Z\s]+$/,
            message: 'Address type should be 2-20 characters long and contain only letters'
        },
        name: {
            required: true,
            minLength: 3,
            maxLength: 50,
            pattern: /^[a-zA-Z\s]+$/,
            message: 'Name should be 3-50 characters long and contain only letters'
        },
        landMark: {
            required: true,
            minLength: 3,
            maxLength: 100,
            message: 'Landmark should be 3-100 characters long'
        },
        city: {
            required: true,
            minLength: 2,
            maxLength: 50,
            pattern: /^[a-zA-Z\s]+$/,
            message: 'City should be 2-50 characters long and contain only letters'
        },
        state: {
            required: true,
            minLength: 2,
            maxLength: 50,
            pattern: /^[a-zA-Z\s]+$/,
            message: 'State should be 2-50 characters long and contain only letters'
        },
        pincode: {
            required: true,
            pattern: /^\d{6}$/,
            message: 'Pincode should be exactly 6 digits'
        },
        phone: {
            required: true,
            pattern: /^[6-9]\d{9}$/,
            message: 'Please enter a valid 10-digit Indian mobile number'
        },
        altPhone: {
            pattern: /^[6-9]\d{9}$/,
            message: 'Please enter a valid 10-digit Indian mobile number (optional)'
        }
    };

    // Validation function
    function validateField(field, value) {
        const rules = validationRules[field];
        const input = form.elements[field];
        const errorElement = input.parentElement.querySelector('.error-message') || 
            createErrorElement(input.parentElement);

        // Reset previous validation state
        input.classList.remove('error');
        errorElement.classList.remove('show');

        if (!rules) return true;

        // Required check
        if (rules.required && !value.trim()) {
            showFieldError(input, errorElement, `${field.charAt(0).toUpperCase() + field.slice(1)} is required`);
            return false;
        }

        // Min length check
        if (rules.minLength && value.trim().length < rules.minLength) {
            showFieldError(input, errorElement, `Minimum ${rules.minLength} characters required`);
            return false;
        }

        // Max length check
        if (rules.maxLength && value.trim().length > rules.maxLength) {
            showFieldError(input, errorElement, `Maximum ${rules.maxLength} characters allowed`);
            return false;
        }

        // Pattern check
        if (rules.pattern && !rules.pattern.test(value.trim())) {
            showFieldError(input, errorElement, rules.message);
            return false;
        }

        return true;
    }

    function createErrorElement(parent) {
        const errorElement = document.createElement('div');
        errorElement.className = 'error-message';
        parent.appendChild(errorElement);
        return errorElement;
    }

    function showFieldError(input, errorElement, message) {
        input.classList.add('error');
        errorElement.textContent = message;
        errorElement.classList.add('show');
    }

    // Add validation to form submission
    form.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        const formData = new FormData(form);
        const data = Object.fromEntries(formData.entries());
        let isValid = true;

        // Validate all fields
        Object.keys(data).forEach(field => {
            if (!validateField(field, data[field])) {
                isValid = false;
            }
        });

        if (!isValid) {
            showAlert(errorAlert, 'Please correct the errors in the form');
            return;
        }
        
        try {
            const url = currentAddressId 
                ? `/edit-address/${currentAddressId}`
                : '/add-address';
                
            const response = await fetch(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            });

            const result = await response.json();

            if (result.success) {
                showAlert(successAlert, result.message);
                setTimeout(() => {
                    window.location.reload();
                }, 1000);
            } else {
                showAlert(errorAlert, result.message);
            }
        } catch (error) {
            showAlert(errorAlert, 'Failed to save address');
        }
    });

    // Add real-time validation
    form.querySelectorAll('input').forEach(input => {
        input.addEventListener('blur', () => {
            validateField(input.name, input.value);
        });

        input.addEventListener('input', () => {
            const errorElement = input.parentElement.querySelector('.error-message');
            if (errorElement && errorElement.classList.contains('show')) {
                validateField(input.name, input.value);
            }
        });
    });

    function showAlert(element, message) {
        element.querySelector('span').textContent = message;
        element.classList.remove('d-none');
        setTimeout(() => {
            element.classList.add('d-none');
        }, 3000);
    }

    function openAddAddressModal() {
        currentAddressId = null;
        document.getElementById('modalTitle').textContent = 'Add New Address';
        form.reset();
        modal.classList.add('active');
        document.body.style.overflow = 'hidden';
    }

    function openEditAddressModal(addressId) {
        currentAddressId = addressId;
        document.getElementById('modalTitle').textContent = 'Edit Address';
        
        const card = document.querySelector(`[data-id="${addressId}"]`);
        const addressType = card.querySelector('.address-type').textContent;
        const details = card.querySelector('.address-details');
        
        const formData = {
            addressType: addressType,
            name: details.querySelector('strong').textContent,
            landMark: details.children[1].textContent.replace('🏠 ', ''),
            city: details.children[2].textContent.split(',')[0].trim(),
            state: details.children[2].textContent.split(',')[1].split('-')[0].trim(),
            pincode: details.children[2].textContent.split('-')[1].trim(),
            phone: details.children[3].textContent.replace('📞 ', '').trim(),
            altPhone: details.children[4] ? details.children[4].textContent.replace('📞 ', '').trim() : ''
        };

        Object.keys(formData).forEach(key => {
            form.elements[key].value = formData[key];
        });

        modal.classList.add('active');
        document.body.style.overflow = 'hidden';
    }

    function closeAddressModal() {
        modal.classList.remove('active');
        document.body.style.overflow = '';
        form.reset();
        currentAddressId = null;
    }

    async function deleteAddress(addressId) {
        if (!confirm('Are you sure you want to delete this address?')) return;

        try {
            const response = await fetch(`/delete-address/${addressId}`, {
                method: 'DELETE'
            });
            const data = await response.json();

            if (data.success) {
                const card = document.querySelector(`[data-id="${addressId}"]`);
                card.style.transform = 'scale(0.9)';
                card.style.opacity = '0';
                setTimeout(() => card.remove(), 300);
                showAlert(successAlert, data.message);
            } else {
                showAlert(errorAlert, data.message);
            }
        } catch (error) {
            showAlert(errorAlert, 'Failed to delete address');
        }
    }

    modal.addEventListener('click', (e) => {
        if (e.target === modal) {
            closeAddressModal();
        }
    });

    document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && modal.classList.contains('active')) {
            closeAddressModal();
        }
    });
</script>

<%- include("../partials/user/footer.ejs") %>
