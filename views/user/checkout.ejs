<%- include('../partials/user/header.ejs') %>

<style>
    :root {
        --primary-color: #4f46e5;
        --primary-hover: #4338ca;
        --secondary-color: #64748b;
        --danger-color: #ef4444;
        --success-color: #22c55e;
        --background-color: #f8fafc;
        --card-background: #ffffff;
        --text-primary: #1e293b;
        --text-secondary: #64748b;
        --border-color: #e2e8f0;
        --shadow-sm: 0 1px 2px 0 rgb(0 0 0 / 0.05);
        --shadow-md: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
        --shadow-lg: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);
        --radius-sm: 0.375rem;
        --radius-md: 0.5rem;
        --radius-lg: 0.75rem;
    }

    body {
        background-color: var(--background-color);
    }

    .checkout-container {
        padding: 2rem 1rem;
        max-width: 1200px;
        margin: 0 auto;
    }

    .card {
        background: var(--card-background);
        border-radius: var(--radius-md);
        border: none;
        box-shadow: var(--shadow-md);
        transition: all 0.3s ease;
    }

    .card:hover {
        box-shadow: var(--shadow-lg);
    }

    .card-title {
        color: var(--text-primary);
        font-size: 1.5rem;
        font-weight: 600;
        margin-bottom: 1.5rem;
        position: relative;
    }

    .card-title::after {
        content: '';
        position: absolute;
        bottom: -0.5rem;
        left: 0;
        width: 2.5rem;
        height: 0.25rem;
        background: var(--primary-color);
        border-radius: var(--radius-sm);
    }

    .address-card {
        border: 1px solid var(--border-color);
        border-radius: var(--radius-md);
        padding: 1.25rem;
        margin-bottom: 1rem;
        transition: all 0.3s ease;
        position: relative;
        overflow: hidden;
    }

    .address-card:hover {
        border-color: var(--primary-color);
        transform: translateY(-2px);
    }

    .address-card.selected {
        border-color: var(--primary-color);
        background-color: #f8faff;
    }

    .form-check-input {
        width: 1.25rem;
        height: 1.25rem;
        margin-top: 0.25rem;
    }

    .form-check-input:checked {
        background-color: var(--primary-color);
        border-color: var(--primary-color);
    }

    .form-check-label {
        padding-left: 0.5rem;
        color: var(--text-primary);
    }

    .btn-edit {
        padding: 0.5rem 1rem;
        font-size: 0.875rem;
        border-radius: var(--radius-sm);
        transition: all 0.3s ease;
    }

    .btn-primary {
        background-color: var(--primary-color);
        border-color: var(--primary-color);
    }

    .btn-primary:hover {
        background-color: var(--primary-hover);
        border-color: var(--primary-hover);
        transform: translateY(-1px);
    }

    .btn-outline-primary {
        color: var(--primary-color);
        border-color: var(--primary-color);
    }

    .btn-outline-primary:hover {
        background-color: var(--primary-color);
        color: white;
    }

    .order-summary {
        background: var(--card-background);
        border-radius: var(--radius-md);
        padding: 1.5rem;
    }

    .order-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0.75rem 0;
        border-bottom: 1px solid var(--border-color);
    }

    .order-item:last-child {
        border-bottom: none;
    }

    .order-total {
        font-size: 1.25rem;
        font-weight: 600;
        color: var(--text-primary);
        margin-top: 1rem;
        padding-top: 1rem;
        border-top: 2px solid var(--border-color);
    }

    /* Modal Specific Styles */
    .modal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        backdrop-filter: blur(4px);
        z-index: 2000;
    }

    .modal-dialog {
        max-width: 500px;
    }

    .modal-content {
        border: none;
        border-radius: var(--radius-lg);
        box-shadow: var(--shadow-lg);
    }

    .modal-header {
        background-color: var(--card-background);
        border-bottom: 2px solid var(--border-color);
        border-radius: var(--radius-lg) var(--radius-lg) 0 0;
        padding: 1.5rem;
    }

    .modal-header .close {
        padding: 1.5rem;
        margin: -1.5rem;
        font-size: 1.5rem;
        opacity: 0.5;
        transition: opacity 0.3s ease;
    }

    .modal-header .close:hover {
        opacity: 1;
    }

    .modal-title {
        color: var(--text-primary);
        font-weight: 600;
        font-size: 1.25rem;
        margin: 0;
    }

    .modal-body {
        padding: 1.5rem;
        background-color: var(--card-background);
    }

    .modal-footer {
        background-color: var(--card-background);
        border-top: 2px solid var(--border-color);
        border-radius: 0 0 var(--radius-lg) var(--radius-lg);
        padding: 1.25rem;
    }

    /* Form Specific Styles */
    .form-label {
        color: var(--text-primary);
        font-weight: 500;
        margin-bottom: 0.5rem;
        font-size: 0.9rem;
    }

    .form-control {
        height: calc(2.5rem + 2px);
        padding: 0.5rem 1rem;
        font-size: 1rem;
        line-height: 1.5;
        border-radius: var(--radius-sm);
        border: 1px solid var(--border-color);
        transition: all 0.3s ease;
    }

    .form-control:focus {
        border-color: var(--primary-color);
        box-shadow: 0 0 0 2px rgba(79, 70, 229, 0.1);
    }

    .custom-select {
        background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3e%3cpath fill='none' stroke='%23343a40' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M2 5l6 6 6-6'/%3e%3c/svg%3e");
        background-repeat: no-repeat;
        background-position: right 0.75rem center;
        background-size: 16px 12px;
    }

    .form-control::placeholder {
        color: #a0aec0;
        opacity: 1;
    }

    .form-control.is-invalid {
        border-color: var(--danger-color);
        padding-right: calc(1.5em + 0.75rem);
        background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' width='12' height='12' fill='none' stroke='%23dc3545' viewBox='0 0 12 12'%3e%3ccircle cx='6' cy='6' r='4.5'/%3e%3cpath stroke-linejoin='round' d='M5.8 3.6h.4L6 6.5z'/%3e%3ccircle cx='6' cy='8.2' r='.6' fill='%23dc3545' stroke='none'/%3e%3c/svg%3e");
        background-repeat: no-repeat;
        background-position: right calc(0.375em + 0.1875rem) center;
        background-size: calc(0.75em + 0.375rem) calc(0.75em + 0.375rem);
    }

    .invalid-feedback {
        display: none;
        width: 100%;
        margin-top: 0.25rem;
        font-size: 0.875rem;
        color: var(--danger-color);
    }

    .form-control.is-invalid ~ .invalid-feedback {
        display: block;
    }

    /* Button Styles */
    .modal-footer .btn {
        padding: 0.5rem 1.5rem;
        font-weight: 500;
        border-radius: var(--radius-sm);
        transition: all 0.3s ease;
    }

    .modal-footer .btn-secondary {
        color: var(--text-primary);
        background-color: #f1f5f9;
        border: none;
    }

    .modal-footer .btn-secondary:hover {
        background-color: #e2e8f0;
        transform: translateY(-1px);
    }

    .modal-footer .btn-primary {
        background-color: var(--primary-color);
        border: none;
    }

    .modal-footer .btn-primary:hover {
        background-color: var(--primary-hover);
        transform: translateY(-1px);
    }

    /* Responsive Adjustments */
    @media (max-width: 576px) {
        .modal-dialog {
            margin: 0.5rem;
        }

        .modal-body {
            padding: 1rem;
        }

        .modal-footer {
            padding: 1rem;
        }

        .form-group {
            margin-bottom: 1rem;
        }
    }
    .order-summary {
        background: var(--card-background);
    }

    .coupon-section {
        margin-bottom: 1.5rem;
    }

    .coupon-section .input-group {
        margin-bottom: 0.5rem;
    }

    .coupon-section .input-group .form-control {
        border-top-right-radius: 0;
        border-bottom-right-radius: 0;
    }

    .coupon-section .input-group .btn {
        border-top-left-radius: 0;
        border-bottom-left-radius: 0;
    }

    #couponMessage {
        font-size: 0.875rem;
    }

    #couponMessage.text-danger {
        color: var(--danger-color);
    }

    #couponMessage.text-success {
        color: var(--success-color);
    }

    .coupon-section {
        position: relative;
    }
    .coupon-toggle {
        padding: 10px;
        border: 1px solid #dee2e6;
        border-radius: 4px;
        cursor: pointer;
        display: flex;
        justify-content: space-between;
        align-items: center;
        background-color: white;
    }
    .coupon-toggle:hover {
        background-color: #f8f9fa;
    }
    .coupon-list {
        position: absolute;
        top: 100%;
        left: 0;
        right: 0;
        background: white;
        border: 1px solid #dee2e6;
        border-radius: 4px;
        margin-top: 5px;
        max-height: 250px;
        overflow-y: auto;
        z-index: 1000;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    .coupon-item {
        padding: 10px 15px;
        border-bottom: 1px solid #dee2e6;
        cursor: pointer;
    }
    .coupon-item:last-child {
        border-bottom: none;
    }
    .coupon-item:hover {
        background-color: #f8f9fa;
    }
    .coupon-code {
        font-weight: bold;
        color: #4f46e5;
    }
    .coupon-description {
        font-size: 0.875rem;
        color: #6c757d;
    }
    .coupon-details {
        font-size: 0.75rem;
        color: #6c757d;
        margin-top: 5px;
    }
    /* Add these styles to ensure proper z-index stacking */
    .swal2-container {
        z-index: 9999 !important;
    }

    .modal {
        z-index: 2000;
    }

    .modal-backdrop {
        z-index: 1900;
    }
</style>

<!-- Space after header -->
<div style="margin-top: 100px;"></div>

<!-- Breadcrumb -->
<div class="container">
    <div class="bread-crumb flex-w p-l-25 p-r-15 p-t-30 p-lr-0-lg">
        <a href="/" class="stext-109 cl8 hov-cl1 trans-04">
            Home
            <i class="fa fa-angle-right m-l-9 m-r-10" aria-hidden="true"></i>
        </a>
        <a href="/cart" class="stext-109 cl8 hov-cl1 trans-04">
            Cart
            <i class="fa fa-angle-right m-l-9 m-r-10" aria-hidden="true"></i>
        </a>
        <span class="stext-109 cl4">
            Checkout
        </span>
    </div>
</div>

<!-- Space between breadcrumb and content -->
<div style="margin-top: 50px;"></div>

<!-- Checkout Content -->
<div class="container mb-5 checkout-container">
    <div class="row">
        <!-- Shipping Address -->
        <div class="col-lg-8">
            <div class="card border-0 shadow-sm mb-4">
                <div class="card-body p-4">
                    <h4 class="mb-4">Shipping Address</h4>
                    <div class="d-flex justify-content-between align-items-center mb-4">
                        <span>Select a delivery address</span>
                        <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#addAddressModal">
                            Add New Address
                        </button>
                    </div>
                    <% if (addresses && addresses.length > 0) { %>
                        <div class="row">
                            <% addresses.forEach(address => { %>
                                <div class="col-md-6 mb-3">
                                    <div class="card h-100 address-card">
                                        <div class="card-body">
                                            <div class="form-check">
                                                <input class="form-check-input" type="radio" 
                                                    name="addressId" value="<%= address._id %>" 
                                                    id="address<%= address._id %>" required>
                                                <label class="form-check-label" for="address<%= address._id %>">
                                                    <strong><%= address.name %></strong><br>
                                                    <%= address.landMark %><br>
                                                    <%= address.city %>, <%= address.state %> <%= address.pincode %><br>
                                                    Phone: <%= address.phone %><br>
                                                    <% if (address.altPhone) { %>
                                                        Alt Phone: <%= address.altPhone %>
                                                    <% } %>
                                                </label>
                                            </div>
                                            <div class="mt-3">
                                                <button type="button" class="btn btn-outline-primary btn-sm edit-address" 
                                                        data-address='<%= JSON.stringify(address) %>'
                                                        data-toggle="modal" data-target="#editAddressModal">
                                                    Edit
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            <% }); %>
                        </div>
                    <% } else { %>
                        <div class="text-center py-4">
                            <p class="mb-3">No addresses found. Please add a delivery address.</p>
                        </div>
                    <% } %>
                </div>
            </div>

            <!-- Payment Method -->
            <div class="card border-0 shadow-sm">
                <div class="card-body p-4">
                    <h4 class="mb-4">Payment Method</h4>
                    <div class="form-check mb-3">
                        <input class="form-check-input" type="radio" name="paymentMethod" 
                            id="razorpay" value="RAZORPAY" checked>
                        <label class="form-check-label" for="razorpay">
                            <img src="https://razorpay.com/assets/razorpay-logo.svg" alt="Razorpay" height="25">
                            Pay Online (Credit/Debit Card, UPI, Netbanking)
                        </label>
                    </div>
                    <div class="form-check mb-3">
                        <input class="form-check-input" type="radio" name="paymentMethod" 
                            id="cod" value="COD">
                        <label class="form-check-label" for="cod">
                            Cash on Delivery (COD)
                        </label>
                    </div>
                </div>
            </div>
        </div>

        <!-- Order Summary -->
        <div class="col-lg-4">
            <div class="card border-0 shadow-sm">
                <div class="card-body p-4 order-summary">
                    <h4 class="mb-4">Order Summary</h4>
                    
                    <!-- Coupon Section -->
                    <div class="mb-3">
                        <label for="couponSelect" class="form-label">Apply Coupon</label>
                        <div class="coupon-section">
                            <select class="form-select" id="couponSelect" style="display: none;">
                                <option value="">Select a coupon</option>
                            </select>
                            <div class="coupon-toggle" id="couponToggle">
                                <span class="toggle-text">View Available Coupons</span>
                                <i class="fas fa-chevron-down"></i>
                            </div>
                            <div id="couponList" class="coupon-list" style="display: none;">
                                <!-- Coupons will be populated here -->
                            </div>
                            <button class="btn btn-danger" type="button" id="removeCoupon" style="display: none;">
                                <i class="fas fa-times"></i> Remove Coupon
                            </button>
                        </div>
                        <div id="couponMessage" class="mt-2" style="display: none;"></div>
                    </div>

                    <% cart.items.forEach(item => { %>
                        <div class="d-flex justify-content-between align-items-center mb-3 order-item">
                            <% if (item.productId) { %>
                                <span><%= item.productId.productName %> × <%= item.quantity %></span>
                                <span>₹<%= item.totalPrice.toFixed(2) %></span>
                            <% } else { %>
                                <span class="text-danger">Product not available</span>
                                <span>₹<%= item.totalPrice.toFixed(2) %></span>
                            <% } %>
                        </div>
                    <% }); %>
                    <hr>
                    <div class="d-flex justify-content-between mb-3">
                        <span>Subtotal</span>
                        <span>₹<%= total.toFixed(2) %></span>
                    </div>
                    <div class="d-flex justify-content-between mb-3" id="couponDiscountRow" style="display: none;">
                        <span>Coupon Discount</span>
                        <span class="text-success">-₹<span id="couponDiscountAmount">0.00</span></span>
                    </div>
                    <div class="d-flex justify-content-between mb-3">
                        <span>Shipping</span>
                        <span class="text-success">Free</span>
                    </div>
                    <hr>
                    <div class="d-flex justify-content-between mb-4">
                        <strong>Total</strong>
                        <strong>₹<span id="finalTotal"><%= total.toFixed(2) %></span></strong>
                    </div>
                    <button id="placeOrderBtn" class="btn btn-primary btn-block py-2 <%= addresses && addresses.length > 0 ? '' : 'disabled' %>">
                        Place Order
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Add Address Modal -->
<div class="modal fade" id="addAddressModal" tabindex="-1" role="dialog" aria-labelledby="addAddressModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addAddressModalLabel">Add New Address</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="addAddressForm">
                    <div class="form-group">
                        <label class="form-label">Address Type</label>
                        <select class="form-control custom-select" name="addressType" required>
                            <option value="">Select Type</option>
                            <option value="Home">Home</option>
                            <option value="Work">Work</option>
                            <option value="Other">Other</option>
                        </select>
                        <div class="invalid-feedback"></div>
                    </div>
                    <div class="form-group">
                        <label class="form-label">Full Name</label>
                        <input type="text" class="form-control" name="name" placeholder="Enter your full name" required>
                        <div class="invalid-feedback"></div>
                    </div>
                    <div class="form-group">
                        <label class="form-label">Landmark</label>
                        <input type="text" class="form-control" name="landMark" placeholder="Enter landmark" required>
                        <div class="invalid-feedback"></div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                <label class="form-label">City</label>
                                <input type="text" class="form-control" name="city" placeholder="Enter city" required>
                                <div class="invalid-feedback"></div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                <label class="form-label">State</label>
                                <input type="text" class="form-control" name="state" placeholder="Enter state" required>
                                <div class="invalid-feedback"></div>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                <label class="form-label">Pincode</label>
                                <input type="text" class="form-control" name="pincode" placeholder="Enter 6-digit pincode" required>
                                <div class="invalid-feedback"></div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                <label class="form-label">Phone Number</label>
                                <input type="tel" class="form-control" name="phone" placeholder="Enter mobile number" required>
                                <div class="invalid-feedback"></div>
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="form-label">Alternative Phone (Optional)</label>
                        <input type="tel" class="form-control" name="altPhone" placeholder="Enter alternative number">
                        <div class="invalid-feedback"></div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="saveNewAddress">Save Address</button>
            </div>
        </div>
    </div>
</div>

<!-- Edit Address Modal -->
<div class="modal fade" id="editAddressModal" tabindex="-1" role="dialog" aria-labelledby="editAddressModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editAddressModalLabel">Edit Address</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="editAddressForm">
                    <input type="hidden" name="addressId">
                    <div class="form-group">
                        <label class="form-label">Address Type</label>
                        <select class="form-control custom-select" name="addressType" required>
                            <option value="">Select Type</option>
                            <option value="Home">Home</option>
                            <option value="Work">Work</option>
                            <option value="Other">Other</option>
                        </select>
                        <div class="invalid-feedback"></div>
                    </div>
                    <div class="form-group">
                        <label class="form-label">Full Name</label>
                        <input type="text" class="form-control" name="name" placeholder="Enter your full name" required>
                        <div class="invalid-feedback"></div>
                    </div>
                    <div class="form-group">
                        <label class="form-label">Landmark</label>
                        <input type="text" class="form-control" name="landMark" placeholder="Enter landmark" required>
                        <div class="invalid-feedback"></div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                <label class="form-label">City</label>
                                <input type="text" class="form-control" name="city" placeholder="Enter city" required>
                                <div class="invalid-feedback"></div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                <label class="form-label">State</label>
                                <input type="text" class="form-control" name="state" placeholder="Enter state" required>
                                <div class="invalid-feedback"></div>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                <label class="form-label">Pincode</label>
                                <input type="text" class="form-control" name="pincode" placeholder="Enter 6-digit pincode" required>
                                <div class="invalid-feedback"></div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                <label class="form-label">Phone Number</label>
                                <input type="tel" class="form-control" name="phone" placeholder="Enter mobile number" required>
                                <div class="invalid-feedback"></div>
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="form-label">Alternative Phone (Optional)</label>
                        <input type="tel" class="form-control" name="altPhone" placeholder="Enter alternative number">
                        <div class="invalid-feedback"></div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="saveEditAddress">Update Address</button>
            </div>
        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    console.log('DOM Content Loaded');
    
    // Initialize elements
    const couponToggle = document.getElementById('couponToggle');
    const couponList = document.getElementById('couponList');
    const removeCouponBtn = document.getElementById('removeCoupon');
    const couponDiscountRow = document.getElementById('couponDiscountRow');
    const couponDiscountAmount = document.getElementById('couponDiscountAmount');
    const finalTotal = document.getElementById('finalTotal');
    let originalTotal = <%= total %>; // Make sure this variable is available from your backend
    let availableCoupons = [];
    let appliedCoupon = null;

    // Add remove coupon button handler
    if (removeCouponBtn) {
        removeCouponBtn.addEventListener('click', function() {
            console.log('Remove coupon clicked');
            appliedCoupon = null;
            removeCouponBtn.style.display = 'none';
            couponToggle.querySelector('.toggle-text').textContent = 'View Available Coupons';
            
            // Hide discount row
            if (couponDiscountRow) {
                couponDiscountRow.style.display = 'none';
            }
            
            // Reset final total to original total
            if (finalTotal) {
                finalTotal.textContent = parseFloat(originalTotal).toFixed(2);
            }
            
            // Show success message
            showMessage('Coupon removed successfully!', 'success');
        });
    }

    // Function to show messages
    function showMessage(message, type) {
        const messageDiv = document.getElementById('couponMessage');
        if (messageDiv) {
            messageDiv.textContent = message;
            messageDiv.className = `mt-2 text-${type}`;
            messageDiv.style.display = 'block';
            
            // Hide message after 3 seconds
            setTimeout(() => {
                messageDiv.style.display = 'none';
            }, 3000);
        }
    }

    // Fetch available coupons
    async function fetchAvailableCoupons() {
        try {
            console.log('Fetching coupons...');
            couponList.innerHTML = '<div class="p-3 text-center">Loading coupons...</div>';
            
            const response = await fetch('/coupons/available', {
                headers: {
                    'Accept': 'application/json'
                },
                credentials: 'same-origin'
            });
            
            console.log('Response status:', response.status);
            const contentType = response.headers.get('content-type');
            console.log('Content type:', contentType);

            if (!contentType || !contentType.includes('application/json')) {
                throw new Error('Invalid response from server');
            }

            const data = await response.json();
            console.log('Coupon data:', data);

            if (data.success) {
                availableCoupons = data.coupons;
                if (!Array.isArray(availableCoupons)) {
                    throw new Error('Invalid coupons data received');
                }
                if (availableCoupons.length === 0) {
                    couponList.innerHTML = '<div class="p-3 text-center">No coupons available</div>';
                } else {
                    renderCoupons();
                }
            } else {
                throw new Error(data.message || 'Failed to fetch coupons');
            }
        } catch (error) {n
            console.error('Error fetching coupons:', error);
            couponList.innerHTML = `
                <div class="p-3 text-center text-danger">
                    ${error.message || 'Error loading coupons'}
                    <button class="btn btn-sm btn-outline-primary mt-2" onclick="retryFetchCoupons()">
                        Try Again
                    </button>
                </div>`;
        }
    }

    // Toggle dropdown
    if (couponToggle) {
        console.log('Adding click listener to coupon toggle');
        couponToggle.addEventListener('click', function(event) {
            console.log('Coupon toggle clicked');
            event.stopPropagation();
            const icon = this.querySelector('i');
            
            if (couponList.style.display === 'none') {
                console.log('Opening dropdown');
                couponList.style.display = 'block';
                icon.style.transform = 'rotate(180deg)';
                if (availableCoupons.length === 0) {
                    fetchAvailableCoupons();
                }
            } else {
                console.log('Closing dropdown');
                couponList.style.display = 'none';
                icon.style.transform = 'rotate(0deg)';
            }
        });
    }

    // Close dropdown when clicking outside
    document.addEventListener('click', function(event) {
        if (!couponToggle.contains(event.target) && !couponList.contains(event.target)) {
            couponList.style.display = 'none';
            couponToggle.querySelector('i').style.transform = 'rotate(0deg)';
        }
    });

    // Add renderCoupons function
    function renderCoupons() {
        try {
            console.log('Rendering coupons:', availableCoupons);
            couponList.innerHTML = availableCoupons.map(coupon => `
                <div class="coupon-item" data-code="${coupon.code}">
                    <div class="coupon-code">${coupon.code}</div>
                    <div class="coupon-description">${coupon.description || 'No description available'}</div>
                    <div class="coupon-details">
                        <span>${coupon.discountType === 'percentage' 
                            ? `${coupon.discountAmount}% off` 
                            : `₹${coupon.discountAmount} off`}</span>
                        ${coupon.minimumPurchase ? `<span>Min. Purchase: ₹${coupon.minimumPurchase}</span>` : ''}
                        ${coupon.maximumDiscount ? `<span>Max Discount: ₹${coupon.maximumDiscount}</span>` : ''}
                    </div>
                </div>
            `).join('');

            // Add click handlers to coupon items
            document.querySelectorAll('.coupon-item').forEach(item => {
                item.addEventListener('click', () => {
                    const code = item.dataset.code;
                    const selectedCoupon = availableCoupons.find(c => c.code === code);
                    if (selectedCoupon) {
                        appliedCoupon = selectedCoupon;
                        couponList.style.display = 'none';
                        couponToggle.querySelector('.toggle-text').textContent = 'Coupon: ' + code;
                        couponToggle.querySelector('i').style.transform = 'rotate(0deg)';
                        
                        // Show remove button
                        if (removeCouponBtn) {
                            removeCouponBtn.style.display = 'block';
                        }
                        
                        // Calculate and display discount
                        const total = parseFloat(originalTotal);
                        const discount = calculateDiscount(selectedCoupon, total);
                        
                        // Update discount amount display
                        if (couponDiscountAmount) {
                            couponDiscountAmount.textContent = discount.toFixed(2);
                        }
                        
                        // Show discount row
                        if (couponDiscountRow) {
                            couponDiscountRow.style.display = 'flex';
                        }
                        
                        // Update final total
                        const newTotal = total - discount;
                        if (finalTotal) {
                            finalTotal.textContent = newTotal.toFixed(2);
                        }
                        
                        // Show success message
                        showMessage('Coupon applied successfully!', 'success');
                    }
                });
            });
        } catch (error) {
            console.error('Error rendering coupons:', error);
            couponList.innerHTML = '<div class="p-3 text-center text-danger">Error displaying coupons</div>';
        }
    }

    // Add calculateDiscount helper function
    function calculateDiscount(coupon, total) {
        let discount = 0;
        if (coupon.discountType === 'percentage') {
            discount = (total * coupon.discountAmount) / 100;
            if (coupon.maximumDiscount && discount > coupon.maximumDiscount) {
                discount = coupon.maximumDiscount;
            }
        } else {
            discount = coupon.discountAmount;
        }
        return discount;
    }

    // Add retryFetchCoupons function
    function retryFetchCoupons() {
        fetchAvailableCoupons();
    }
    const placeOrderBtn = document.getElementById('placeOrderBtn');
    
    if (placeOrderBtn) {
        placeOrderBtn.addEventListener('click', async function() {
            const selectedAddress = document.querySelector('input[name="addressId"]:checked');
            const selectedPayment = document.querySelector('input[name="paymentMethod"]:checked');
            
            if (!selectedAddress) {
                Swal.fire({
                    icon: 'error',
                    title: 'Address Required',
                    text: 'Please select a delivery address'
                });
                return;
            }

            if (!selectedPayment) {
                Swal.fire({
                    icon: 'error',
                    title: 'Payment Method Required',
                    text: 'Please select a payment method'
                });
                return;
            }

            try {
                // Calculate final amount including coupon discount
                const total = parseFloat(originalTotal);
                let finalAmount = total;
                let couponData = null;

                console.log('Original Total:', total);

                if (appliedCoupon) {
                    const discount = calculateDiscount(appliedCoupon, total);
                    finalAmount = total - discount;
                    console.log('Applied Coupon:', appliedCoupon);
                    console.log('Calculated Discount:', discount);
                    console.log('Final Amount after discount:', finalAmount);
                    
                    couponData = {
                        code: appliedCoupon.code,
                        discountAmount: discount,
                        discountType: appliedCoupon.discountType
                    };
                }

                const orderData = {
                    addressId: selectedAddress.value,
                    paymentMethod: selectedPayment.value,
                    amount: finalAmount,
                    couponCode: appliedCoupon ? appliedCoupon.code : null
                };

                if (couponData) {
                    orderData.coupon = couponData;
                }

                console.log('Sending order data:', orderData);

                // Create order
                const orderResponse = await fetch('/order/create', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(orderData)
                });

                const result = await orderResponse.json();
                console.log('Order creation response:', result);
                
                if (!result.success) {
                    throw new Error(result.message);
                }

                if (selectedPayment.value === 'COD') {
                    window.location.href = `/order/success/${result.orderId}`;
                    return;
                }

                // Handle Razorpay payment
                const razorpayAmount = Math.round(finalAmount * 100); // Convert to paise
                console.log('Razorpay amount (in paise):', razorpayAmount);

                const options = {
                    key: '<%= process.env.RAZORPAY_KEY_ID %>',
                    amount: razorpayAmount,
                    currency: "INR",
                    name: "Fasco Fashion Store",
                    description: "Fashion Store Purchase",
                    order_id: result.razorpayOrderId,
                    handler: async function (response) {
                        try {
                            console.log('Payment successful:', response);
                            
                            const verifyData = {
                                orderId: result.orderId,
                                razorpay_payment_id: response.razorpay_payment_id,
                                razorpay_order_id: response.razorpay_order_id,
                                razorpay_signature: response.razorpay_signature,
                                amount: finalAmount
                            };

                            console.log('Sending verification data:', verifyData);

                            const verifyResponse = await fetch('/order/verify-payment', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify(verifyData)
                            });

                            const verifyResult = await verifyResponse.json();
                            console.log('Payment verification response:', verifyResult);
                            
                            if (verifyResult.success) {
                                window.location.href = `/order/success/${result.orderId}`;
                            } else {
                                throw new Error(verifyResult.message || 'Payment verification failed');
                            }
                        } catch (error) {
                            console.error('Payment verification error:', error);
                            Swal.fire({
                                icon: 'error',
                                title: 'Payment Verification Failed',
                                text: error.message || 'Could not verify payment. Please contact support.'
                            });
                        }
                    },
                    prefill: {
                        name: '<%= user.name %>',
                        email: '<%= user.email %>',
                    },
                    theme: {
                        color: "#3399cc"
                    }
                };

                console.log('Razorpay options:', options);
                const rzp = new Razorpay(options);
                rzp.open();

            } catch (error) {
                console.error('Order creation error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Order Failed',
                    text: error.message
                });
            }
        });
    }

    // Handle Add New Address
    document.getElementById('saveNewAddress').addEventListener('click', async function() {
        const form = document.getElementById('addAddressForm');
        const formData = new FormData(form);
        const data = Object.fromEntries(formData.entries());

        try {
            const response = await fetch('/user/add-address', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            });

            const result = await response.json();

            if (result.success) {
                $('#addAddressModal').modal('hide');
                form.reset();
                location.reload();
            }
        } catch (error) {
            console.error('Error:', error);
        }
    });

    // Handle Edit Address
    let editingAddressId = null;

    function editAddress(addressId) {
        editingAddressId = addressId;
        const form = document.getElementById('editAddressForm');
        
        fetch(`/user/get-address/${addressId}`)
            .then(response => response.json())
            .then(address => {
                form.elements.addressId.value = address._id;
                form.elements.addressType.value = address.addressType;
                form.elements.name.value = address.name;
                form.elements.landMark.value = address.landMark;
                form.elements.city.value = address.city;
                form.elements.state.value = address.state;
                form.elements.pincode.value = address.pincode;
                form.elements.phone.value = address.phone;
                form.elements.altPhone.value = address.altPhone || '';
                
                $('#editAddressModal').modal('show');
            })
            .catch(error => console.error('Error:', error));
    }

    // Handle Update Address
    document.getElementById('saveEditAddress').addEventListener('click', async function() {
        const form = document.getElementById('editAddressForm');
        const formData = new FormData(form);
        const data = Object.fromEntries(formData.entries());

        try {
            const response = await fetch(`/user/edit-address/${data.addressId}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            });

            const result = await response.json();

            if (result.success) {
                // First hide modal and cleanup
                editAddressModal.modal('hide');
                editAddressModal.on('hidden.bs.modal', async function () {
                    // Remove backdrop and cleanup
                    $('.modal-backdrop').remove();
                    $('body').removeClass('modal-open').removeAttr('style');
                    
                    // Show success message and reload after modal is fully hidden
                    await Swal.fire({
                        icon: 'success',
                        title: 'Success!',
                        text: 'Address updated successfully'
                    });
                    window.location.reload();
                });
            }
        } catch (error) {
            console.error('Error:', error);
        }
    });


    // Handle Select Address
    function selectAddress(addressId) {
        document.querySelectorAll('.address-card').forEach(card => {
            card.classList.remove('selected');
        });
        
        const selectedCard = document.querySelector(`[data-address-id="${addressId}"]`);
        if (selectedCard) {
            selectedCard.classList.add('selected');
        }
        
        // Update hidden input with selected address
        document.getElementById('selectedAddressId').value = addressId;
    }
});

    // Validation rules
    const validationRules = {
        addressType: {
            required: true,
            message: 'Please select an address type'
        },
        name: {
            required: true,
            minLength: 3,
            maxLength: 50,
            pattern: /^[a-zA-Z\s]+$/,
            message: 'Name should be 3-50 characters long and contain only letters'
        },
        landMark: {
            required: true,
            minLength: 3,
            maxLength: 100,
            message: 'Landmark should be 3-100 characters long'
        },
        city: {
            required: true,
            minLength: 2,
            maxLength: 50,
            pattern: /^[a-zA-Z\s]+$/,
            message: 'City should be 2-50 characters long and contain only letters'
        },
        state: {
            required: true,
            minLength: 2,
            maxLength: 50,
            pattern: /^[a-zA-Z\s]+$/,
            message: 'State should be 2-50 characters long and contain only letters'
        },
        pincode: {
            required: true,
            pattern: /^\d{6}$/,
            message: 'Pincode should be exactly 6 digits'
        },
        phone: {
            required: true,
            pattern: /^[6-9]\d{9}$/,
            message: 'Please enter a valid 10-digit Indian mobile number'
        },
        altPhone: {
            pattern: /^[6-9]\d{9}$/,
            message: 'Please enter a valid 10-digit Indian mobile number (optional)'
        }
    };
        
    // Validation function
    function validateField(form, field, value) {
            const rules = validationRules[field];
            const input = form.elements[field];
        const errorElement = input.parentElement.querySelector('.error-message') || 
            createErrorElement(input.parentElement);
            
        // Reset previous validation state
            input.classList.remove('is-invalid');
        errorElement.classList.remove('show');

        if (!rules) return true;

        // Required check
        if (rules.required && !value.trim()) {
            showFieldError(input, errorElement, `${field.charAt(0).toUpperCase() + field.slice(1)} is required`);
            return false;
        }

        // Min length check
        if (rules.minLength && value.trim().length < rules.minLength) {
            showFieldError(input, errorElement, `Minimum ${rules.minLength} characters required`);
            return false;
        }

        // Max length check
        if (rules.maxLength && value.trim().length > rules.maxLength) {
            showFieldError(input, errorElement, `Maximum ${rules.maxLength} characters allowed`);
            return false;
        }

        // Pattern check
        if (rules.pattern && !rules.pattern.test(value.trim())) {
            showFieldError(input, errorElement, rules.message);
            return false;
        }

        return true;
    }

    function createErrorElement(parent) {
        const errorElement = document.createElement('div');
        errorElement.className = 'invalid-feedback error-message';
        parent.appendChild(errorElement);
        return errorElement;
    }

    function showFieldError(input, errorElement, message) {
                input.classList.add('is-invalid');
        errorElement.textContent = message;
        errorElement.classList.add('show');
    }

    // Add address form handling
    const addAddressForm = document.getElementById('addAddressForm');
    const saveNewAddressBtn = document.getElementById('saveNewAddress');

    if (saveNewAddressBtn) {
        saveNewAddressBtn.addEventListener('click', async function() {
            const formData = new FormData(addAddressForm);
            const data = Object.fromEntries(formData.entries());

        try {
                const response = await fetch('/address/add', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            });

            const result = await response.json();

            if (result.success) {
                    await Swal.fire({
                        icon: 'success',
                        title: 'Success!',
                        text: 'Address added successfully'
                    });
                    window.location.reload();
                
            } else {
                    await Swal.fire({
                    icon: 'error',
                     title: 'Error!',
                    text: result.message || 'Failed to add address'
                });
            }
        } catch (error) {
            console.error('Error:', error);
                await Swal.fire({
                icon: 'error',
                    title: 'Error!',
                    text: 'Failed to add address'
            });
        }
    });
    }

    // Edit address form handling
    const editAddressForm = document.getElementById('editAddressForm');
    const saveEditAddressBtn = document.getElementById('saveEditAddress');
    let currentEditAddressId = null;

    // Handle edit button click
    document.querySelectorAll('.edit-address').forEach(button => {
        button.addEventListener('click', function() {
            const address = JSON.parse(this.dataset.address);
            const form = document.getElementById('editAddressForm');
            
            // Fill the edit form
            form.querySelector('[name="addressId"]').value = address._id;
            form.querySelector('[name="addressType"]').value = address.addressType;
            form.querySelector('[name="name"]').value = address.name;
            form.querySelector('[name="landMark"]').value = address.landMark;
            form.querySelector('[name="city"]').value = address.city;
            form.querySelector('[name="state"]').value = address.state;
            form.querySelector('[name="pincode"]').value = address.pincode;
            form.querySelector('[name="phone"]').value = address.phone;
            form.querySelector('[name="altPhone"]').value = address.altPhone || '';
            
            $('#editAddressModal').modal('show');
        });
    });

    if (saveEditAddressBtn) {
        saveEditAddressBtn.addEventListener('click', async function() {
        const form = document.getElementById('editAddressForm');
        const formData = new FormData(form);
        const data = Object.fromEntries(formData.entries());
        let isValid = true;

            // Validate all fields
            Object.keys(data).forEach(field => {
                if (!validateField(editAddressForm, field, data[field])) {
                isValid = false;
            }
        });

            if (!isValid) {
                return;
            }

        try {
                const response = await fetch(`/address/edit/${data.addressId}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            });

            const result = await response.json();

            if (result.success) {
                    await Swal.fire({
                        icon: 'success',
                        title: 'Success!',
                        text: 'Address updated successfully'
                    });
                    window.location.reload();
            } else {
                    await Swal.fire({
                    icon: 'error',
                        title: 'Error!',
                    text: result.message || 'Failed to update address'
                });
                window.location.reload();
            }
        } catch (error) {
            console.error('Error:', error);
                await Swal.fire({
                icon: 'error',
                    title: 'Error!',
                    text: 'Failed to update address'
            });
            window.location.reload();
        }
    });
    }

    // Add real-time validation to both forms
    [addAddressForm, editAddressForm].forEach(form => {
        if (form) {
            form.querySelectorAll('input, select').forEach(input => {
                input.addEventListener('blur', () => {
                    validateField(form, input.name, input.value);
                });

                input.addEventListener('input', () => {
                    const errorElement = input.parentElement.querySelector('.error-message');
                    if (errorElement && errorElement.classList.contains('show')) {
                        validateField(form, input.name, input.value);
                    }
                });
            });
        }
    });

</script>

<!-- Space before footer -->
<div style="margin-bottom: 100px;"></div>

<%- include('../partials/user/footer.ejs') %>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>

<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
