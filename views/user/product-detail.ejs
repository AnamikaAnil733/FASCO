<%- include("../../views/partials/user/header") %>
<!-- Add SweetAlert2 CSS and JS -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@sweetalert2/theme-material-ui/material-ui.css">
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
<div class="product-detail">
    <!-- Breadcrumb -->
    <div class="container">
        <nav class="breadcrumb-nav" aria-label="breadcrumb">
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><a href="/">Home</a></li>
                <li class="breadcrumb-item"><a href="/shop">Shop</a></li>
                <li class="breadcrumb-item active"><%= product.productName %></li>
            </ol>
        </nav>
    </div>

    <!-- Product Section -->
    <div class="container">
        <div class="product-container">
            <!-- Product Images -->
            <div class="product-gallery">
                <div class="main-image wrap-pic-w">
                    <% if (product.variants && product.variants.length > 0 && product.variants[0].images && product.variants[0].images.length > 0) { %>
                        <img id="mainImage" 
                            src="/uploads/product-images/<%= product.variants[0].images[0] %>" 
                            alt="<%= product.productName %>">
                    <% } else { %>
                        <img id="mainImage" 
                            src="/images/no-image.png" 
                            alt="No image available">
                    <% } %>
                    <div id="zoomResult" class="zoom-result"></div>
                </div>
                
                <!-- Thumbnails -->
                <div class="thumbnails">
                    <% if (product.variants && product.variants.length > 0) { %>
                        <% product.variants.forEach((variant, variantIndex) => { %>
                            <% if (variant.images && variant.images.length > 0) { %>
                                <% variant.images.forEach((image, imageIndex) => { %>
                                    <div class="thumbnail" onclick="updateMainImage('/uploads/product-images/<%= image %>', <%= variantIndex %>)">
                                        <img src="/uploads/product-images/<%= image %>" 
                                            alt="<%= product.productName %> - <%= variant.color %>">
                                    </div>
                                <% }); %>
                            <% } %>
                        <% }); %>
                    <% } %>
                </div>
            </div>

            <!-- Product Info -->
            <div class="product-info">
                <h1 class="product-title">
                    <%= product.productName %>
                    <button id="wishlistBtn" class="wishlist-btn" onclick="toggleWishlist('<%= product._id %>')">
                        <i class="far fa-heart" id="wishlistIcon"></i>
                    </button>
                </h1>
               
                
                <!-- Price -->
                <div class="price-section">
                    <div class="current-price">₹<%= product.salesPrice %></div>
                    <% if (product.regularPrice > product.salesPrice) { %>
                        <div class="original-price">₹<%= product.regularPrice %></div>
                        <div class="discount-badge">
                            <%= Math.round((product.regularPrice - product.salesPrice) / product.regularPrice * 100) %>% OFF
                        </div>
                    <% } %>
                </div>

                <p class="product-description"><%= product.description %></p>

                <!-- Color Selection -->
                <div class="colors-section">
                    <h3>Available Colors</h3>
                    <div class="color-options">
                        <% if (product.variants && product.variants.length > 0) { %>
                            <% product.variants.forEach((variant, index) => { %>
                                <div class="color-option">
                                    <button class="color-btn <%= index === 0 ? 'active' : '' %>"
                                            onclick="selectColor('<%= variant.color %>', <%= index %>)"
                                            data-quantity="<%= variant.quantity %>"
                                            style="background-color: <%= variant.color.toLowerCase() %>">
                                        <span class="color-name"><%= variant.color %></span>
                                    </button>
                                </div>
                            <% }); %>
                        <% } %>
                    </div>
                </div>

                <!-- Quantity -->
                <div class="quantity-section">
                    <h3>Quantity</h3>
                    <div class="quantity-controls">
                        <button class="quantity-btn" onclick="updateQuantity(-1)">−</button>
                        <input type="number" id="quantity" value="1" min="1" max="5" onchange="validateQuantity(this)">
                        <button class="quantity-btn" onclick="updateQuantity(1)">+</button>
                    </div>
                    <div class="stock-info">
                        <% if (product.variants && product.variants.length > 0) { %>
                            <% if (product.variants[0].quantity > 0) { %>
                                <p class="available-stock">
                                    Available Stock: <span id="current-stock"><%= product.variants[0].quantity %></span>
                                </p>
                                <p class="quantity-limit">Maximum 5 items per order</p>
                            <% } else { %>
                                <p class="out-of-stock">Out of Stock</p>
                            <% } %>
                        <% } %>
                    </div>
                </div>

                <!-- Actions -->
                <div class="product-actions">
                    <button class="add-to-cart-btn" onclick="addToCart()" 
                            <%= (!product.variants || product.variants.length === 0 || product.variants[0].quantity === 0) ? 'disabled' : '' %>>
                        <span class="btn-icon">
                            <i class="fas fa-shopping-cart"></i>
                        </span>
                        <span class="btn-text">
                            <%= (!product.variants || product.variants.length === 0 || product.variants[0].quantity === 0) ? 'Out of Stock' : 'Add to Cart' %>
                        </span>
                        <span class="btn-shine"></span>
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Related Products Section -->
<section class="sec-relate-product bg0 p-t-45 p-b-105">
    <div class="container">
        <div class="p-b-45">
            <h3 class="ltext-106 cl5 txt-center">
                Related Products
            </h3>
        </div>

        <!-- Related Products Grid -->
        <div class="row isotope-grid">
            <% relatedProducts.forEach(function(relatedProduct) { %>
                <% if (relatedProduct.variants && relatedProduct.variants.length > 0) { %>
                    <div class="col-sm-6 col-md-4 col-lg-3 p-b-35 isotope-item">
                        <div class="block2">
                            <div class="block2-pic hov-img0">
                                <% if (relatedProduct.variants[0] && relatedProduct.variants[0].images && relatedProduct.variants[0].images.length > 0) { %>
                                    <img src="/uploads/product-images/<%= relatedProduct.variants[0].images[0] %>" alt="<%= relatedProduct.productName %>" class="product-image">
                                <% } else { %>
                                    <img src="/images/no-image.png" alt="No image available" class="product-image">
                                <% } %>
                                <a href="/product/<%= relatedProduct._id %>" class="block2-btn flex-c-m stext-103 cl2 size-102 bg0 bor2 hov-btn1 p-lr-15 trans-04">
                                    Quick View
                                </a>
                            </div>

                            <div class="block2-txt flex-w flex-t p-t-14">
                                <div class="block2-txt-child1 flex-col-l">
                                    <a href="/product/<%= relatedProduct._id %>" class="stext-104 cl4 hov-cl1 trans-04 js-name-b2 p-b-6">
                                        <%= relatedProduct.productName %>
                                    </a>
                                    <button class="wishlist-btn-small" onclick="toggleWishlist('<%= relatedProduct._id %>', true)">
                                        <i class="far fa-heart wishlist-icon" data-product-id="<%= relatedProduct._id %>"></i>
                                    </button>
                                    <div class="price-section">
                                        <div class="current-price">₹<%= relatedProduct.salesPrice %></div>
                                        <% if (relatedProduct.regularPrice > relatedProduct.salesPrice) { %>
                                            <div class="original-price">₹<%= relatedProduct.regularPrice %></div>
                                            <div class="discount-badge">
                                                <%= Math.round((relatedProduct.regularPrice - relatedProduct.salesPrice) / relatedProduct.regularPrice * 100) %>% OFF
                                            </div>
                                        <% } %>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                <% } %>
            <% }); %>
        </div>
    </div>
</section>

<style>
    .product-detail {
        padding: 140px 0 100px;
        background-color: #f7f9fc;
    }

    .breadcrumb-nav {
        margin-bottom: 2rem;
    }

    .breadcrumb {
        padding: 0;
        margin: 0;
        background: transparent;
    }

    .breadcrumb-item {
        font-size: 0.875rem;
        color: #6b7280;
    }

    .breadcrumb-item a {
        color: #4f46e5;
        text-decoration: none;
        transition: color 0.2s ease;
    }

    .breadcrumb-item a:hover {
        color: #4338ca;
    }

    .breadcrumb-item.active {
        color: #1a1f36;
    }

    .product-container {
        background: #ffffff;
        border-radius: 24px;
        padding: 3rem;
        box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px -1px rgba(0, 0, 0, 0.1);
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 4rem;
    }

    .product-gallery {
        position: relative;
    }

    .main-image {
        position: relative;
        border-radius: 16px;
        overflow: hidden;
        margin-bottom: 1.5rem;
        aspect-ratio: 1;
        background: #f8fafc;
    }

    .main-image img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        transition: transform 0.3s ease;
    }

    .main-image:hover img {
        transform: scale(1.05);
    }

    .thumbnails {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(80px, 1fr));
        gap: 1rem;
    }

    .thumbnail {
        border-radius: 12px;
        overflow: hidden;
        cursor: pointer;
        aspect-ratio: 1;
        background: #f8fafc;
        border: 2px solid transparent;
        transition: all 0.2s ease;
    }

    .thumbnail img {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .thumbnail:hover {
        border-color: #4f46e5;
        transform: translateY(-2px);
    }

    .thumbnail.active {
        border-color: #4f46e5;
    }

    .product-info {
        display: flex;
        flex-direction: column;
        gap: 2rem;
    }

    .product-title {
        font-size: 2.25rem;
        font-weight: 600;
        color: #1a1f36;
        margin: 0;
        letter-spacing: -0.5px;
        line-height: 1.2;
    }

    .price-section {
        display: flex;
        align-items: center;
        gap: 1rem;
    }

    .current-price {
        font-size: 2rem;
        font-weight: 600;
        color: #1a1f36;
        letter-spacing: -0.5px;
    }

    .original-price {
        font-size: 1.25rem;
        color: #6b7280;
        text-decoration: line-through;
    }

    .discount-badge {
        padding: 0.5rem 1rem;
        background: #dcfce7;
        color: #166534;
        border-radius: 12px;
        font-size: 0.875rem;
        font-weight: 500;
    }

    .product-description {
        font-size: 1rem;
        line-height: 1.6;
        color: #4b5563;
        margin: 0;
    }

    .colors-section, .quantity-section {
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .colors-section h3, .quantity-section h3 {
        font-size: 1.125rem;
        font-weight: 600;
        color: #1a1f36;
        margin: 0;
    }

    .color-options {
        display: flex;
        gap: 1rem;
        flex-wrap: wrap;
    }

    .color-option {
        position: relative;
    }

    .color-btn {
        width: 2.5rem;
        height: 2.5rem;
        border-radius: 12px;
        border: 2px solid transparent;
        cursor: pointer;
        transition: all 0.2s ease;
        position: relative;
    }

    .color-btn:hover {
        transform: translateY(-2px);
    }

    .color-btn.active {
        border-color: #4f46e5;
    }

    .color-name {
        position: absolute;
        bottom: -1.75rem;
        left: 50%;
        transform: translateX(-50%);
        font-size: 0.75rem;
        color: #6b7280;
        white-space: nowrap;
    }

    .quantity-controls {
        display: flex;
        align-items: center;
        gap: 1rem;
    }

    .quantity-btn {
        width: 2.5rem;
        height: 2.5rem;
        border: none;
        background: #f1f5f9;
        color: #1a1f36;
        border-radius: 12px;
        font-size: 1.25rem;
        cursor: pointer;
        transition: all 0.2s ease;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .quantity-btn:hover:not(:disabled) {
        background: #e2e8f0;
    }

    .quantity-btn:disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }

    #quantity {
        width: 4rem;
        height: 2.5rem;
        border: 1px solid #e2e8f0;
        border-radius: 12px;
        text-align: center;
        font-size: 1rem;
        color: #1a1f36;
        -moz-appearance: textfield;
    }

    #quantity::-webkit-outer-spin-button,
    #quantity::-webkit-inner-spin-button {
        -webkit-appearance: none;
        margin: 0;
    }

    .stock-info {
        font-size: 0.875rem;
        color: #6b7280;
    }

    .available-stock {
        margin: 0;
        color: #059669;
        font-weight: 500;
    }

    .quantity-limit {
        margin: 0.25rem 0 0 0;
        color: #6b7280;
        font-size: 0.75rem;
    }

    .out-of-stock {
        margin: 0;
        color: #dc2626;
        font-weight: 500;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .out-of-stock::before {
        content: "⚠️";
    }

    .quantity-error {
        color: #dc2626;
        font-size: 0.75rem;
        margin-top: 0.25rem;
        display: none;
    }

    .quantity-error.show {
        display: block;
        animation: fadeIn 0.3s ease;
    }

    @keyframes fadeIn {
        from { opacity: 0; transform: translateY(-4px); }
        to { opacity: 1; transform: translateY(0); }
    }

    .product-actions {
        margin-top: 2rem;
    }

    .add-to-cart-btn {
        width: 100%;
        padding: 1.25rem 2rem;
        background: linear-gradient(135deg, #4f46e5 0%, #4338ca 100%);
        color: white;
        border: none;
        border-radius: 16px;
        font-size: 1.125rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        position: relative;
        overflow: hidden;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 0.75rem;
        letter-spacing: -0.3px;
        box-shadow: 0 4px 6px -1px rgba(79, 70, 229, 0.2), 
                   0 2px 4px -2px rgba(79, 70, 229, 0.1);
    }

    .add-to-cart-btn:not(:disabled):hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 12px -1px rgba(79, 70, 229, 0.25), 
                   0 4px 6px -2px rgba(79, 70, 229, 0.15);
    }

    .add-to-cart-btn:not(:disabled):active {
        transform: translateY(0);
        box-shadow: 0 2px 4px -1px rgba(79, 70, 229, 0.15), 
                   0 1px 2px -1px rgba(79, 70, 229, 0.1);
    }

    .add-to-cart-btn:disabled {
        background: linear-gradient(135deg, #e2e8f0 0%, #cbd5e1 100%);
        color: #94a3b8;
        cursor: not-allowed;
        box-shadow: none;
    }

    .btn-icon {
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.25rem;
    }

    .btn-text {
        position: relative;
        z-index: 1;
    }

    .btn-shine {
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(
            120deg,
            transparent 0%,
            rgba(255, 255, 255, 0.1) 45%,
            rgba(255, 255, 255, 0.2) 50%,
            rgba(255, 255, 255, 0.1) 55%,
            transparent 100%
        );
        animation: shine 8s infinite;
    }

    @keyframes shine {
        0% { left: -100%; }
        20% { left: 100%; }
        100% { left: 100%; }
    }

    .wishlist-btn {
        background: none;
        border: none;
        cursor: pointer;
        padding: 5px;
        margin-left: 10px;
        transition: all 0.3s ease;
    }

    .wishlist-btn i {
        font-size: 24px;
        color: #666;
    }

    .wishlist-btn i.fas {
        color: #ff4444;
    }

    .wishlist-btn:hover i {
        transform: scale(1.1);
    }


    .wishlist-btn-small {
    background: none;
    border: none;
    cursor: pointer;
    padding: 4px;
    transition: all 0.3s ease;
}

.wishlist-btn-small i {
    font-size: 18px;
    color: #666;
}

.wishlist-btn-small i.fas {
    color: #ff4444;
}

.wishlist-btn-small:hover i {
    transform: scale(1.1);
}

    /* Toast notification styles */
    .colored-toast.swal2-icon-success {
        background-color: #a5dc86 !important;
        color: white !important;
    }

    .colored-toast.swal2-icon-error {
        background-color: #f27474 !important;
        color: white !important;
    }

    .colored-toast .swal2-title {
        color: white !important;
    }

    .colored-toast .swal2-close {
        color: white !important;
    }

    .colored-toast .swal2-html-container {
        color: white !important;
    }

    .swal2-container {
        z-index: 9999;
    }

    .swal2-popup.swal2-toast {
        padding: 0.5em 1em;
        margin-top: 15px;
        margin-right: 15px;
        box-shadow: 0 0 10px rgba(0,0,0,0.1);
        border-radius: 8px;
    }

    @media (max-width: 992px) {
        .product-container {
            grid-template-columns: 1fr;
            gap: 3rem;
            padding: 2rem;
        }
    }

    @media (max-width: 768px) {
        .product-detail {
            padding: 100px 0 60px;
        }

        .product-title {
            font-size: 1.875rem;
        }

        .current-price {
            font-size: 1.75rem;
        }

        .thumbnails {
            grid-template-columns: repeat(auto-fit, minmax(60px, 1fr));
        }

        .add-to-cart-btn {
            padding: 1rem 1.5rem;
            font-size: 1rem;
        }
    }

    @media (max-width: 576px) {
        .product-container {
            padding: 1.5rem;
        }

        .price-section {
            flex-wrap: wrap;
        }
    }
</style>
<script src="/js/zoom.js"></script>
<script>
const variants = <%- JSON.stringify(product.variants) %>;
let currentVariant = 0;

async function addToCart() {
    const quantity = parseInt(document.getElementById('quantity').value);
    const variant = variants[currentVariant];
    const maxStock = Math.min(variant.quantity, 5); // Limit to 5 or available stock

    // Check if user is logged in
    try {
        const response = await fetch('/check-auth');
        const data = await response.json();
        
        if (!data.isLoggedIn) {
            // Show login prompt with Sweet Alert
            Swal.fire({
                title: 'Not Logged In',
                text: 'Please log in to add items to your cart',
                icon: 'info',
                showCancelButton: true,
                confirmButtonText: 'Login',
                cancelButtonText: 'Cancel',
                confirmButtonColor: '#4f46e5',
                cancelButtonColor: '#6b7280',
                customClass: {
                    confirmButton: 'swal2-confirm btn-primary',
                    cancelButton: 'swal2-cancel btn-secondary'
                }
            }).then((result) => {
                if (result.isConfirmed) {
                    window.location.href = '/login';
                }
            });
            return;
        }

        // Proceed with adding to cart if logged in
        if (quantity > maxStock) {
            Swal.fire({
                title: 'Invalid Quantity',
                text: `Maximum ${maxStock} items allowed`,
                icon: 'warning',
                confirmButtonColor: '#4f46e5'
            });
            return;
        }

        // Show loading state
        Swal.fire({
            title: 'Adding to Cart',
            text: 'Please wait...',
            allowOutsideClick: false,
            showConfirmButton: false,
            willOpen: () => {
                Swal.showLoading();
            }
        });

        const productData = {
            productId: '<%= product._id %>',
            quantity: quantity,
            variantIndex: currentVariant
        };

        const cartResponse = await fetch('/cart/add', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(productData)
        });

        const cartData = await cartResponse.json();

        if (cartResponse.ok && cartData.success) {
            Swal.fire({
                title: 'Success!',
                text: 'Product added to cart',
                icon: 'success',
                confirmButtonColor: '#4f46e5',
                showConfirmButton: false,
                timer: 1500
            });
            
            // Update cart count
            updateCartCount();
        } else {
            // Show the specific error message from the server
            Swal.fire({
                title: 'Error',
                text: cartData.message || 'Failed to add item to cart. Please try again.',
                icon: 'error',
                confirmButtonColor: '#4f46e5'
            });
        }
    } catch (error) {
        console.error('Error:', error);
        Swal.fire({
            title: 'Error',
            text: 'Failed to add item to cart. Please try again.',
            icon: 'error',
            confirmButtonColor: '#4f46e5'
        });
    }
}
// Function to handle wishlist toggle for both main and related products
async function toggleWishlist(productId, isRelated = false) {
    try {
        // Get the correct icon based on whether it's a related product or main product
        const icon = isRelated ? 
            document.querySelector(`.wishlist-icon[data-product-id="${productId}"]`) : 
            document.getElementById('wishlistIcon');
            
        if (!icon) {
            console.error('Wishlist icon not found');
            return;
        }

        const isInWishlist = icon.classList.contains('fas');
        
        const response = await fetch(isInWishlist ? `/wishlist/remove/${productId}` : '/wishlist/add', {
            method: isInWishlist ? 'DELETE' : 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ productId })
        });

        const result = await response.json();
        
        if (result.success) {
            // Toggle heart icon
            icon.classList.toggle('far');
            icon.classList.toggle('fas');
            
            // Show success message
            Swal.fire({
                icon: 'success',
                title: result.message,
                showConfirmButton: false,
                timer: 1500,
                position: 'top-end',
                toast: true
            });
            
            // Update wishlist count in header
            updateWishlistCount();
        } else {
            // Don't show error for "already in wishlist" message
            if (result.message === 'Product already in wishlist') {
                return;
            }
            
            Swal.fire({
                icon: 'error',
                title: 'Oops...',
                text: result.message || 'Something went wrong!',
                position: 'top-end',
                toast: true,
                timer: 3000
            });
        }
    } catch (error) {
        console.error('Error:', error);
        Swal.fire({
            icon: 'error',
            title: 'Oops...',
            text: 'Something went wrong!',
            position: 'top-end',
            toast: true,
            timer: 3000
        });
    }
}

// Function to update wishlist count in header
async function updateWishlistCount() {
    try {
        const response = await fetch('/wishlist/count');
        const result = await response.json();
        
        if (result.success) {
            // Update desktop wishlist icon
            const wishlistIcon = document.getElementById('wishlist-icon');
            if (wishlistIcon) {
                wishlistIcon.setAttribute('data-notify', result.count);
            }
            
            // Update mobile wishlist icon
            const wishlistIconMobile = document.getElementById('wishlist-icon-mobile');
            if (wishlistIconMobile) {
                wishlistIconMobile.setAttribute('data-notify', result.count);
            }
        }
    } catch (error) {
        console.error('Error updating wishlist count:', error);
    }
}

// Function to initialize wishlist status for both main and related products
async function initializeWishlistStatus() {
    try {
        // Initialize main product wishlist status
        const mainProductId = '<%= product._id %>';
        if (mainProductId) {
            const mainResponse = await fetch(`/check-wishlist-status/${mainProductId}`);
            const mainResult = await mainResponse.json();
            
            const mainIcon = document.getElementById('wishlistIcon');
            if (mainIcon && mainResult.isInWishlist) {
                mainIcon.classList.remove('far');
                mainIcon.classList.add('fas');
            }
        }

        // Initialize related products wishlist status
        const relatedIcons = document.querySelectorAll('.wishlist-icon[data-product-id]');
        for (const icon of relatedIcons) {
            const relatedProductId = icon.dataset.productId;
            if (relatedProductId) {
                const relatedResponse = await fetch(`/check-wishlist-status/${relatedProductId}`);
                const relatedResult = await relatedResponse.json();
                
                if (relatedResult.isInWishlist) {
                    icon.classList.remove('far');
                    icon.classList.add('fas');
                }
            }
        }

        // Initialize wishlist count
        updateWishlistCount();
    } catch (error) {
        console.error('Error initializing wishlist status:', error);
    }
}

// Initialize everything when the page loads
document.addEventListener('DOMContentLoaded', initializeWishlistStatus);
function validateQuantity(input) {
    const maxStock = parseInt(document.getElementById('current-stock').textContent);
    const maxLimit = 5;
    let value = parseInt(input.value);
    
    // Remove any existing error messages
    const existingError = document.querySelector('.quantity-error');
    if (existingError) {
        existingError.remove();
    }

    // Create error message element
    const errorMsg = document.createElement('p');
    errorMsg.className = 'quantity-error';
    
    if (isNaN(value) || value < 1) {
        value = 1;
    } else if (value > maxLimit) {
        value = maxLimit;
        errorMsg.textContent = 'Maximum 5 items per order';
        errorMsg.classList.add('show');
    } else if (value > maxStock) {
        value = maxStock;
        errorMsg.textContent = `Only ${maxStock} items available in stock`;
        errorMsg.classList.add('show');
    }
    
    input.value = value;
    
    // Add error message if needed
    if (errorMsg.textContent) {
        input.parentElement.insertAdjacentElement('afterend', errorMsg);
        setTimeout(() => errorMsg.remove(), 3000);
    }
    
    // Update button states
    document.querySelector('.quantity-btn:first-child').disabled = value <= 1;
    document.querySelector('.quantity-btn:last-child').disabled = value >= Math.min(maxLimit, maxStock);
}

function updateQuantity(change) {
    const input = document.getElementById('quantity');
    const currentValue = parseInt(input.value);
    const maxStock = parseInt(document.getElementById('current-stock').textContent);
    const maxLimit = 5;
    
    const newValue = Math.max(1, Math.min(currentValue + change, Math.min(maxLimit, maxStock)));
    input.value = newValue;
    
    validateQuantity(input);
}

function selectColor(color, index) {
    // Update active color button
    document.querySelectorAll('.color-btn').forEach(btn => btn.classList.remove('active'));
    document.querySelectorAll('.color-btn')[index].classList.add('active');
    let product = <%- JSON.stringify(product) %>;
    document.querySelector('#current-stock').innerHTML = product.variants[index].quantity;

    // Update current variant index
    currentVariant = index;
    
    // Update stock display
    const variant = variants[index];
    document.getElementById('current-stock').textContent = variant.quantity;
}

function updateMainImage(src, variantIndex) {
    document.getElementById('mainImage').src = src;
    document.getElementById('zoomResult').style.backgroundImage = `url(${src})`;
    currentVariant = variantIndex;
}


</script>


<%-include("../../views/partials/user/footer")%>
