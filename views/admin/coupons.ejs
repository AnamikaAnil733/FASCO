<%- include("../partials/admin/header") %>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h3 class="card-title">Coupons</h3>
                    <button class="btn btn-primary float-right" onclick="openCreateCouponModal()">
                        Create Coupon
                    </button>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-bordered table-hover">
                            <thead>
                                <tr>
                                    <th>Code</th>
                                    <th>Description</th>
                                    <th>Discount</th>
                                    <th>Min Purchase</th>
                                    <th>Max Discount</th>
                                    <th>Valid Until</th>
                                    <th>Usage</th>
                                    <th>Status</th>
                                    <th>Action</th>
                                </tr>
                            </thead>
                            <tbody>
                                <% coupons.forEach(coupon => { %>
                                    <tr>
                                        <td><%= coupon.code %></td>
                                        <td><%= coupon.description %></td>
                                        <td>
                                            <%= coupon.discountType === 'percentage' ? 
                                                coupon.discountAmount + '%' : 
                                                '₹' + coupon.discountAmount %>
                                        </td>
                                        <td>₹<%= coupon.minimumPurchase %></td>
                                        <td>₹<%= coupon.maximumDiscount %></td>
                                        <td><%= new Date(coupon.endDate).toLocaleDateString() %></td>
                                        <td><%= coupon.usedCount %>/<%= coupon.usageLimit %></td>
                                        <td>
                                            <% const now = new Date(); %>
                                            <% if (!coupon.isActive) { %>
                                                <span class="badge bg-danger">Inactive</span>
                                            <% } else if (now > new Date(coupon.endDate)) { %>
                                                <span class="badge bg-warning">Expired</span>
                                            <% } else if (now < new Date(coupon.startDate)) { %>
                                                <span class="badge bg-info">Upcoming</span>
                                            <% } else { %>
                                                <span class="badge bg-success">Active</span>
                                            <% } %>
                                        </td>
                                        <td>
                                            <button class="btn btn-icon btn-delete" onclick="deleteCoupon('<%= coupon._id %>')" title="Delete Coupon">
                                                <i class="fa-solid fa-trash"></i>
                                            </button>
                                        </td>
                                    </tr>
                                <% }); %>
                            </tbody>
                        </table>
                        
                        <!-- Pagination -->
                        <div class="pagination-area mt-4 d-flex align-items-center justify-content-between">
                            <div class="pagination-info">
                                Showing <%= (pagination.page - 1) * pagination.limit + 1 %> to 
                                <%= Math.min(pagination.page * pagination.limit, pagination.totalCoupons) %> 
                                of <%= pagination.totalCoupons %> entries
                            </div>
                            <nav aria-label="Page navigation">
                                <ul class="pagination">
                                    <!-- Previous button -->
                                    <li class="page-item <%= pagination.page <= 1 ? 'disabled' : '' %>">
                                        <a class="page-link" href="?page=<%= pagination.page - 1 %>&limit=<%= pagination.limit %>">
                                            <i class="fas fa-chevron-left"></i>
                                        </a>
                                    </li>
                                    
                                    <!-- Page numbers -->
                                    <% for(let i = 1; i <= pagination.totalPages; i++) { %>
                                        <li class="page-item <%= pagination.page === i ? 'active' : '' %>">
                                            <a class="page-link" href="?page=<%= i %>&limit=<%= pagination.limit %>">
                                                <%= i %>
                                            </a>
                                        </li>
                                    <% } %>
                                    
                                    <!-- Next button -->
                                    <li class="page-item <%= pagination.page >= pagination.totalPages ? 'disabled' : '' %>">
                                        <a class="page-link" href="?page=<%= pagination.page + 1 %>&limit=<%= pagination.limit %>">
                                            <i class="fas fa-chevron-right"></i>
                                        </a>
                                    </li>
                                </ul>
                            </nav>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Create Coupon Modal -->
<div class="modal fade" id="createCouponModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Create Coupon</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="createCouponForm" class="needs-validation" novalidate>
                    <div class="mb-3">
                        <label class="form-label">Coupon Code</label>
                        <input type="text" class="form-control" name="code" required pattern="[A-Za-z0-9]{3,15}" 
                               oninput="this.value = this.value.toUpperCase()"
                               title="Code must be 3-15 characters long and contain only letters and numbers">
                        <div class="invalid-feedback">Code must be 3-15 characters long and contain only letters and numbers</div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Description</label>
                        <textarea class="form-control" name="description" required minlength="10"
                                  title="Description must be at least 10 characters long"></textarea>
                        <div class="invalid-feedback">Description must be at least 10 characters long</div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Discount Type</label>
                        <select class="form-control" name="discountType" required onchange="updateDiscountValidation()">
                            <option value="percentage">Percentage</option>
                            <option value="fixed">Fixed Amount</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Discount Amount</label>
                        <input type="number" class="form-control" name="discountAmount" required
                               title="Enter a valid discount amount">
                        <div class="invalid-feedback" id="discountAmountFeedback">
                            Enter a valid discount amount
                        </div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Minimum Purchase</label>
                        <input type="number" class="form-control" name="minimumPurchase" required
                               min="1" max="50000"
                               title="Minimum purchase must be between ₹1 and ₹50,000">
                        <div class="invalid-feedback">Minimum purchase must be between ₹1 and ₹50,000</div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Maximum Discount</label>
                        <input type="number" class="form-control" name="maximumDiscount"
                               min="1" max="10000"
                               title="Maximum discount must be between ₹1 and ₹10,000">
                        <div class="invalid-feedback">Maximum discount must be between ₹1 and ₹10,000</div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Start Date</label>
                        <input type="datetime-local" class="form-control" name="startDate" required>
                        <div class="invalid-feedback">Please select a valid start date</div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">End Date</label>
                        <input type="datetime-local" class="form-control" name="endDate" required>
                        <div class="invalid-feedback">End date must be after start date</div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Usage Limit</label>
                        <input type="number" class="form-control" name="usageLimit"
                               min="1" max="1000"
                               title="Usage limit must be between 1 and 1,000">
                        <div class="invalid-feedback">Usage limit must be between 1 and 1,000</div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="submit" class="btn btn-primary" form="createCouponForm">Create</button>
            </div>
        </div>
    </div>
</div>

<style>
    .btn-icon {
        width: 35px;
        height: 35px;
        padding: 0;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        border-radius: 50%;
        transition: all 0.3s ease;
    }

    .btn-delete {
        background-color: #fff;
        border: 1px solid #dc3545;
        color: #dc3545;
    }

    .btn-delete:hover {
        background-color: #dc3545;
        color: #fff;
        transform: scale(1.05);
        box-shadow: 0 2px 5px rgba(220, 53, 69, 0.2);
    }

    .btn-delete:active {
        transform: scale(0.95);
    }

    .btn-delete i {
        font-size: 1.1rem;
    }

    /* Table styles */
    .table {
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0 0 10px rgba(0,0,0,0.1);
    }

    .table thead th {
        background-color: #f8f9fa;
        border-bottom: 2px solid #dee2e6;
        color: #495057;
        font-weight: 600;
    }

    .table tbody tr:hover {
        background-color: #f8f9fa;
    }

    .table td {
        vertical-align: middle;
    }

    /* Badge styles */
    .badge {
        padding: 0.5em 1em;
        font-weight: 500;
        letter-spacing: 0.3px;
    }

    .badge.bg-success {
        background-color: #28a745 !important;
    }

    .badge.bg-warning {
        background-color: #ffc107 !important;
        color: #000;
    }

    .badge.bg-danger {
        background-color: #dc3545 !important;
    }

    .badge.bg-info {
        background-color: #17a2b8 !important;
    }
</style>

<script>
function openCreateCouponModal() {
    // Set minimum date for start date
    const now = new Date();
    const localDateTime = new Date(now.getTime() - now.getTimezoneOffset() * 60000).toISOString().slice(0, 16);
    document.querySelector('input[name="startDate"]').min = localDateTime;
    
    // Show modal
    const modal = new bootstrap.Modal(document.getElementById('createCouponModal'));
    modal.show();
}

function updateDiscountValidation() {
    const discountType = document.querySelector('select[name="discountType"]').value;
    const discountInput = document.querySelector('input[name="discountAmount"]');
    const feedback = document.getElementById('discountAmountFeedback');

    if (discountType === 'percentage') {
        discountInput.min = 1;
        discountInput.max = 90;
        feedback.textContent = 'Percentage discount must be between 1 and 90';
    } else {
        discountInput.min = 1;
        discountInput.max = 10000;
        feedback.textContent = 'Fixed discount must be between ₹1 and ₹10,000';
    }
}

document.getElementById('createCouponForm').addEventListener('submit', function(e) {
    e.preventDefault();
    
    const form = this;
    if (!form.checkValidity()) {
        e.stopPropagation();
        form.classList.add('was-validated');
        return;
    }

    // Additional date validation
    const startDate = new Date(form.startDate.value);
    const endDate = new Date(form.endDate.value);
    if (endDate <= startDate) {
        form.endDate.setCustomValidity('End date must be after start date');
        form.classList.add('was-validated');
        return;
    }

    // If all validation passes, submit the form
    const formData = new FormData(form);
    const data = Object.fromEntries(formData.entries());
    
    fetch('/admin/coupons/create', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(data)
    })
    .then(response => response.json())
    .then(result => {
        if (result.success) {
            Swal.fire({
                icon: 'success',
                title: 'Success!',
                text: result.message,
                timer: 1500
            }).then(() => {
                location.reload();
            });
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: result.message
            });
        }
    })
    .catch(error => {
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Failed to create coupon'
        });
    });
});

// Initialize validation on page load
updateDiscountValidation();

async function deleteCoupon(couponId) {
    try {
        const result = await Swal.fire({
            title: 'Delete Coupon?',
            text: "This action cannot be undone!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#d33',
            cancelButtonColor: '#3085d6',
            confirmButtonText: 'Yes, delete it!'
        });

        if (result.isConfirmed) {
            const response = await fetch(`/admin/coupons/${couponId}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json'
                }
            });

            const data = await response.json();

            if (response.ok && data.success) {
                await Swal.fire({
                    icon: 'success',
                    title: 'Success!',
                    text: data.message || 'Coupon deleted successfully',
                    timer: 1500
                });
                location.reload();
            } else {
                throw new Error(data.message || 'Failed to delete coupon');
            }
        }
    } catch (error) {
        console.error('Error deleting coupon:', error);
        Swal.fire({
            icon: 'error',
            title: 'Error!',
            text: error.message || 'Failed to delete coupon'
        });
    }
}
</script>

<%- include("../partials/admin/footer") %>