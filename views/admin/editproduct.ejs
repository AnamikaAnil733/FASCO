<%- include("../../views/partials/admin/header") %>
<head>
   <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css">
   <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
   <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
   <script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script>
   <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</head>
<style>
    :root {
        --primary-color: #B5D8CC;
        --secondary-color: #E8B4BC;
        --accent-color: #FFD9C0;
        --background-light: #F8F6F4;
        --text-primary: #6B7B8C;
        --danger-color: #FFB4B4;
    }

    /* Preview Box Styles */
    .preview-box {
        position: relative;
        width: 150px;
        height: 150px;
        border: 2px dashed #ddd;
        border-radius: 8px;
        cursor: pointer;
        overflow: hidden;
        background: #f8f9fa;
        transition: all 0.3s ease;
    }

    .preview-box:hover {
        border-color: var(--primary-color);
        background: #f0f0f0;
    }

    .preview-box .upload-text {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        text-align: center;
        width: 100%;
        padding: 15px;
    }

    .preview-box .upload-icon {
        font-size: 2rem;
        color: #aaa;
        margin-bottom: 8px;
    }

    .preview-box .upload-message {
        font-size: 0.9rem;
        color: #666;
        margin: 5px 0;
    }

    .preview-box .upload-hint {
        font-size: 0.8rem;
        color: #999;
    }

    .preview-box img.preview-image {
        width: 100%;
        height: 100%;
        object-fit: cover;
        display: block;
    }

    .preview-box .remove-image {
        position: absolute;
        top: 5px;
        right: 5px;
        width: 24px;
        height: 24px;
        background: rgba(255, 0, 0, 0.8);
        border: none;
        border-radius: 50%;
        color: white;
        font-size: 16px;
        line-height: 1;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1;
    }

    .preview-box .remove-image:hover {
        background: rgba(255, 0, 0, 1);
    }

    .preview-box.has-image .upload-text {
        display: none;
    }

    /* Cropper Modal Styles */
    .cropper-modal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.85);
        z-index: 9999;
        overflow: auto;
    }

    .cropper-content {
        position: relative;
        width: 90%;
        max-width: 1000px;
        margin: 30px auto;
        background: #fff;
        padding: 20px;
        border-radius: 15px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
    }

    .cropper-container {
        height: 70vh;
        max-height: 600px;
        background: #f8f9fa;
        margin-bottom: 20px;
        border-radius: 8px;
        overflow: hidden;
    }

    #cropperImage {
        max-width: 100%;
        max-height: 100%;
        display: block;
    }

    .cropper-actions {
        display: flex;
        gap: 15px;
        justify-content: center;
        padding: 20px 0;
    }

    .cropper-actions button {
        padding: 12px 25px;
        font-size: 1rem;
        display: flex;
        align-items: center;
        gap: 8px;
        border-radius: 8px;
        transition: all 0.3s ease;
        background: var(--primary-color);
        color: white;
        border: none;
        cursor: pointer;
    }

    .cropper-actions button:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    }

    .cropper-actions button.btn-secondary {
        background: #6c757d;
    }

    .zoom-controls {
        position: fixed;
        right: 30px;
        top: 50%;
        transform: translateY(-50%);
        display: flex;
        flex-direction: column;
        gap: 15px;
        z-index: 10000;
    }

    .zoom-btn {
        width: 45px;
        height: 45px;
        border-radius: 50%;
        border: none;
        background: white;
        color: #333;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: all 0.3s ease;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
    }

    .zoom-btn:hover {
        background: var(--primary-color);
        color: white;
        transform: scale(1.1);
    }

    /* Form Styles */
    .card {
        background: white;
        border-radius: 15px;
        border: 1px solid rgba(0,0,0,0.05);
        box-shadow: 0 5px 15px rgba(0,0,0,0.05);
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

    .card:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 25px rgba(0,0,0,0.1);
    }

    .card-header {
        background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
        color: white;
        border-radius: 15px 15px 0 0;
        padding: 1.5rem;
    }

    .variant-item {
        background: #f8f9fa;
        transition: all 0.3s ease;
        margin-bottom: 1rem;
    }

    .variant-item:hover {
        box-shadow: 0 5px 15px rgba(0,0,0,0.1);
    }
</style>

<section class="content-main">
   <div class="row">
       <div class="col-9">
           <div class="content-header">
               <h2 class="content-title">Edit Product</h2>
           </div>
       </div>
       <div class="col-lg-12">
           <div class="card mb-4">
               <div class="card-body">
                   <form id="productForm" enctype="multipart/form-data">
                       <div class="mb-4">
                           <label for="product_name" class="form-label">Product Name</label>
                           <input type="text" placeholder="Type here" name="productName" class="form-control" id="product_name" value="<%= product.productName %>" required>
                       </div>

                       <div class="mb-4">
                           <label for="product_description" class="form-label">Description</label>
                           <textarea placeholder="Type here" name="description" class="form-control" id="description" rows="4" required><%= product.description %></textarea>
                       </div>

                       <div class="row">
                           <div class="col-lg-3">
                               <div class="mb-4">
                                   <label for="brand" class="form-label">Brand</label>
                                   <input type="text" placeholder="Brand name" name="brand" class="form-control" id="brand" value="<%= product.brand %>" required>
                               </div>
                           </div>
                           <div class="col-lg-3">
                               <div class="mb-4">
                                   <label for="regular_price" class="form-label">Regular Price</label>
                                   <input type="number" placeholder="â‚¹" name="price" class="form-control" id="price" value="<%= product.price %>" required>
                               </div>
                           </div>
                           <div class="col-lg-3">
                               <div class="mb-4">
                                   <label for="category" class="form-label">Category</label>
                                   <select name="category" class="form-select" id="category" required>
                                       <option value="">Select Category</option>
                                       <% cat.forEach(function(category) { %>
                                           <option value="<%= category._id %>" <%= (product.category && product.category.toString() === category._id.toString()) ? 'selected' : '' %>>
                                               <%= category.name %>
                                           </option>
                                       <% }); %>
                                   </select>
                               </div>
                           </div>
                       </div>

                       <div class="card mt-4">
                           <div class="card-body">
                               <h6 class="card-title">Color Variants</h6>
                               <div id="variantsContainer">
                                   <% if (product.variants && product.variants.length > 0) { %>
                                       <% product.variants.forEach(function(variant, variantIndex) { %>
                                           <div class="variant-item border rounded p-3 mb-3" data-variant-index="<%= variantIndex %>">
                                               <div class="row">
                                                   <div class="col-md-4">
                                                       <div class="mb-3">
                                                           <label class="form-label">Color</label>
                                                           <input type="text" class="form-control variant-color" value="<%= variant.color %>" required>
                                                       </div>
                                                   </div>
                                                   <div class="col-md-4">
                                                       <div class="mb-3">
                                                           <label class="form-label">Quantity</label>
                                                           <input type="number" class="form-control variant-quantity" value="<%= variant.quantity %>" required>
                                                       </div>
                                                   </div>
                                                   <div class="col-md-4">
                                                       <button type="button" class="btn btn-danger float-end remove-variant">
                                                           <i class="fas fa-times"></i> Remove
                                                       </button>
                                                   </div>
                                               </div>

                                               <div class="row mt-3">
                                                   <div class="col-12">
                                                       <label class="form-label">Images (Upload exactly 3 images)</label>
                                                       <div class="d-flex gap-3">
                                                           <% for(let i = 0; i < 3; i++) { %>
                                                               <div class="preview-box <%= variant.images && variant.images[i] ? 'has-image' : '' %>"
                                                                    data-variant="<%= variantIndex %>"
                                                                    data-index="<%= i %>">
                                                                   <% if (variant.images && variant.images[i]) { %>
                                                                       <img src="/uploads/product-images/<%= variant.images[i] %>" 
                                                                            alt="Variant <%= i+1 %>" 
                                                                            class="preview-image"
                                                                            data-filename="<%= variant.images[i] %>">
                                                                       <button type="button" class="remove-image" 
                                                                               data-variant="<%= variantIndex %>"
                                                                               data-index="<%= i %>"
                                                                               data-image="<%= variant.images[i] %>">&times;</button>
                                                                   <% } else { %>
                                                                       <div class="upload-text">
                                                                           <i class="fas fa-cloud-upload-alt upload-icon"></i>
                                                                           <p class="upload-message">Click to upload</p>
                                                                           <p class="upload-hint">800x800 recommended</p>
                                                                       </div>
                                                                   <% } %>
                                                                   <input type="file" 
                                                                          class="variant-image" 
                                                                          accept="image/png, image/jpeg, image/jpg"
                                                                          style="display: none;"
                                                                          data-variant="<%= variantIndex %>"
                                                                          data-index="<%= i %>">
                                                               </div>
                                                           <% } %>
                                                       </div>
                                                   </div>
                                               </div>
                                           </div>
                                       <% }); %>
                                   <% } %>
                               </div>
                               <button type="button" class="btn btn-outline-primary mt-3" id="addVariant">
                                   Add Color Variant
                               </button>
                           </div>
                       </div>

                       <div class="mt-4">
                           <button type="submit" class="btn btn-primary">Update Product</button>
                       </div>
                   </form>
               </div>
           </div>
       </div>
   </div>
</section>

<!-- Variant Template (hidden) -->
<template id="variantTemplate">
    <div class="variant-item border rounded p-3 mb-3">
        <div class="row">
            <div class="col-md-4">
                <div class="mb-3">
                    <label class="form-label">Color</label>
                    <input type="text" class="form-control variant-color" required>
                </div>
            </div>
            <div class="col-md-4">
                <div class="mb-3">
                    <label class="form-label">Quantity</label>
                    <input type="number" class="form-control variant-quantity" required>
                </div>
            </div>
            <div class="col-md-4">
                <button type="button" class="btn btn-danger float-end remove-variant">
                    <i class="fas fa-times"></i> Remove
                </button>
            </div>
        </div>

        <div class="row mt-3">
            <div class="col-12">
                <label class="form-label">Images (Upload exactly 3 images)</label>
                <div class="d-flex gap-3">
                    <% for(let i = 0; i < 3; i++) { %>
                        <div class="preview-box"
                             data-index="<%= i %>">
                            <div class="upload-text">
                                <i class="fas fa-cloud-upload-alt upload-icon"></i>
                                <p class="upload-message">Click to upload</p>
                                <p class="upload-hint">800x800 recommended</p>
                            </div>
                            <input type="file" 
                                   class="variant-image" 
                                   accept="image/png, image/jpeg, image/jpg"
                                   style="display: none;"
                                   data-index="<%= i %>">
                        </div>
                    <% } %>
                </div>
            </div>
        </div>
    </div>
</template>

<!-- Cropper Modal -->
<div class="cropper-modal">
    <div class="cropper-content">
        <div class="cropper-container">
            <img id="cropperImage" src="" alt="Image to crop">
        </div>
        <div class="cropper-actions">
            <button type="button" class="btn btn-primary crop-save-btn">
                <i class="fas fa-crop-alt"></i> Crop & Save
            </button>
            <button type="button" class="btn btn-secondary close-modal-btn">
                <i class="fas fa-times"></i> Cancel
            </button>
        </div>
    </div>
    <div class="zoom-controls">
        <button type="button" class="zoom-btn zoom-in-btn">
            <i class="fas fa-search-plus"></i>
        </button>
        <button type="button" class="zoom-btn zoom-out-btn">
            <i class="fas fa-search-minus"></i>
        </button>
    </div>
</div>

<script>
    let cropper = null;
    let currentImageBox = null;
    let deletedImages = new Set();

    // Show cropper modal
    function showCropperModal() {
        document.querySelector('.cropper-modal').style.display = 'block';
    }

    // Close cropper modal
    function closeCropperModal() {
        document.querySelector('.cropper-modal').style.display = 'none';
        if (cropper) {
            cropper.destroy();
            cropper = null;
        }
    }

    // Zoom functions
    function zoomIn() {
        if (cropper) {
            cropper.zoom(0.1);
        }
    }

    function zoomOut() {
        if (cropper) {
            cropper.zoom(-0.1);
        }
    }

    // Initialize cropper
    function initCropper(imageUrl) {
        const image = document.getElementById('cropperImage');
        image.src = imageUrl;
        
        if (cropper) {
            cropper.destroy();
        }
        
        cropper = new Cropper(image, {
            aspectRatio: 1,
            viewMode: 1,
            dragMode: 'move',
            autoCropArea: 1,
            restore: false,
            guides: true,
            center: true,
            highlight: true,
            cropBoxMovable: true,
            cropBoxResizable: true,
            toggleDragModeOnDblclick: false,
            background: true,
            responsive: true,
            minContainerWidth: 200,
            minContainerHeight: 100,
        });
    }

    // Handle image selection
    function handleImageSelect(event, variantIndex, imageIndex) {
        const file = event.target.files[0];
        if (!file) return;

        currentImageBox = { variantIndex, imageIndex };
        const reader = new FileReader();
        
        reader.onload = function(e) {
            showCropperModal();
            initCropper(e.target.result);
        };
        
        reader.readAsDataURL(file);
    }

    // Crop image
    function cropImage() {
        if (!cropper || !currentImageBox) {
            console.error('Cropper or currentImageBox not initialized');
            return;
        }

        console.log('Cropping image...');
        const canvas = cropper.getCroppedCanvas({
            width: 800,
            height: 800
        });

        canvas.toBlob((blob) => {
            console.log('Converting to blob...');
            const previewBox = document.querySelector(`.preview-box[data-variant="${currentImageBox.variantIndex}"][data-index="${currentImageBox.imageIndex}"]`);
            if (!previewBox) {
                console.error('Preview box not found');
                return;
            }

            // Hide upload text
            const uploadText = previewBox.querySelector('.upload-text');
            if (uploadText) {
                uploadText.style.display = 'none';
            }

            // Create or update preview image
            let preview = previewBox.querySelector('img.preview-image');
            if (!preview) {
                preview = document.createElement('img');
                preview.className = 'preview-image';
                previewBox.appendChild(preview);
            }
            preview.src = URL.createObjectURL(blob);

            // Create or update remove button
            let removeBtn = previewBox.querySelector('.remove-image');
            if (!removeBtn) {
                removeBtn = document.createElement('button');
                removeBtn.type = 'button';
                removeBtn.className = 'remove-image';
                removeBtn.innerHTML = '&times;';
                removeBtn.setAttribute('data-variant', currentImageBox.variantIndex);
                removeBtn.setAttribute('data-index', currentImageBox.imageIndex);
                removeBtn.onclick = handleImageRemove;
                previewBox.appendChild(removeBtn);
            }

            // Add has-image class
            previewBox.classList.add('has-image');

            // Update file input
            const input = previewBox.querySelector('.variant-image');
            if (input) {
                const file = new File([blob], 'cropped-image.jpg', { type: 'image/jpeg' });
                const dataTransfer = new DataTransfer();
                dataTransfer.items.add(file);
                input.files = dataTransfer.files;
            }

            closeCropperModal();
        }, 'image/jpeg');
    }

    // Handle image removal
    function handleImageRemove(e) {
        e.preventDefault();
        e.stopPropagation();
        
        const previewBox = e.target.closest('.preview-box');
        if (!previewBox) return;

        // Remove preview image
        const preview = previewBox.querySelector('img.preview-image');
        if (preview) {
            preview.remove();
        }

        // Show upload text
        const uploadText = previewBox.querySelector('.upload-text');
        if (uploadText) {
            uploadText.style.display = 'block';
        }

        // Remove remove button
        e.target.remove();

        // Clear file input
        const input = previewBox.querySelector('.variant-image');
        if (input) {
            input.value = '';
        }

        // Remove has-image class
        previewBox.classList.remove('has-image');
    }

    // Setup event listeners
    document.addEventListener('DOMContentLoaded', function() {
        const productForm = document.getElementById('productForm');

        // Function to setup image handlers for a variant
        function setupVariantImageHandlers(variantElement) {
            const variantIndex = variantElement.getAttribute('data-variant-index');
            
            // Setup preview box click handlers
            variantElement.querySelectorAll('.preview-box').forEach(box => {
                const imageInput = box.querySelector('.variant-image');
                const imageIndex = box.getAttribute('data-index');

                // Click handler for the preview box
                box.addEventListener('click', function(e) {
                    if (e.target.classList.contains('remove-image')) return;
                    imageInput.click();
                });

                // Change handler for the file input
                imageInput.addEventListener('change', function(e) {
                    if (this.files && this.files[0]) {
                        handleImageSelect(e, variantIndex, imageIndex);
                    }
                });
            });
        }

        // Setup handlers for existing variants
        document.querySelectorAll('.variant-item').forEach((variant, index) => {
            variant.setAttribute('data-variant-index', index);
            setupVariantImageHandlers(variant);
        });

        // Add new variant handler
        document.getElementById('addVariant').addEventListener('click', function() {
            const template = document.getElementById('variantTemplate');
            const node = template.content.cloneNode(true);
            const newVariant = node.querySelector('.variant-item');
            const variantIndex = document.querySelectorAll('.variant-item').length;
            
            // Set variant index
            newVariant.setAttribute('data-variant-index', variantIndex);
            
            // Set data-variant attributes for preview boxes
            newVariant.querySelectorAll('.preview-box').forEach(box => {
                box.setAttribute('data-variant', variantIndex);
            });

            // Add remove variant handler
            const removeBtn = newVariant.querySelector('.remove-variant');
            if (removeBtn) {
                removeBtn.addEventListener('click', function() {
                    newVariant.remove();
                });
            }

            // Add to container
            document.getElementById('variantsContainer').appendChild(node);
            
            // Setup image handlers for the new variant
            setupVariantImageHandlers(newVariant);
        });

        // Cropper modal buttons
        document.querySelector('.crop-save-btn').addEventListener('click', cropImage);
        document.querySelector('.close-modal-btn').addEventListener('click', closeCropperModal);
        document.querySelector('.zoom-in-btn').addEventListener('click', zoomIn);
        document.querySelector('.zoom-out-btn').addEventListener('click', zoomOut);

        // Form submission
        productForm.addEventListener('submit', async function(e) {
            e.preventDefault();
            console.log('Form submission started');

            try {
                const formData = new FormData();
                
                // Add product details
                formData.append('name', document.getElementById('product_name').value);
                formData.append('description', document.getElementById('description').value);
                formData.append('regularPrice', document.getElementById('price').value);
                formData.append('category', document.getElementById('category').value);
                formData.append('brand', document.getElementById('brand').value);

                // Add variants data
                const variants = [];
                document.querySelectorAll('.variant-item').forEach((variantItem, variantIndex) => {
                    const variant = {
                        color: variantItem.querySelector('.variant-color').value,
                        quantity: variantItem.querySelector('.variant-quantity').value,
                        images: [] // Will store existing images and references to new ones
                    };

                    // Handle existing images and new images for this variant
                    variantItem.querySelectorAll('.preview-box').forEach((box, imageIndex) => {
                        const input = box.querySelector('.variant-image');
                        const existingImage = box.querySelector('img');
                        
                        if (existingImage && existingImage.dataset.filename) {
                            // Keep existing image
                            variant.images[imageIndex] = existingImage.dataset.filename;
                        }
                        
                        if (input && input.files && input.files[0]) {
                            // Add new image to formData
                            const file = input.files[0];
                            formData.append('variantImages', file);
                            // Mark this slot for a new image
                            variant.images[imageIndex] = null; // Will be replaced by server
                        }
                    });

                    variants.push(variant);
                });

                // Add variants data as JSON
                formData.append('variants', JSON.stringify(variants));

                // Add deleted images if any
                if (deletedImages.size > 0) {
                    const deletedImagesArray = Array.from(deletedImages);
                    deletedImagesArray.forEach(image => {
                        formData.append('deletedImages[]', image);
                    });
                }

                // Show loading state
                Swal.fire({
                    title: 'Updating Product...',
                    text: 'Please wait while we update the product',
                    allowOutsideClick: false,
                    didOpen: () => {
                        Swal.showLoading();
                    }
                });

                // Get the product ID
                const productId = '<%= product._id %>';
                
                // Log the form data for debugging
                console.log('FormData contents:');
                for (let pair of formData.entries()) {
                    console.log(pair[0] + ': ' + (pair[1] instanceof File ? pair[1].name : pair[1]));
                }

                // Make the request
                const response = await fetch(`/admin/updateProduct/${productId}`, {
                    method: 'POST',
                    body: formData
                });

                // Log response details for debugging
                console.log('Response status:', response.status);
                const responseText = await response.text();
                console.log('Raw response:', responseText);

                let result;
                try {
                    result = JSON.parse(responseText);
                } catch (parseError) {
                    console.error('Failed to parse response as JSON:', parseError);
                    console.error('Response text was:', responseText);
                    throw new Error('Server returned an invalid response format');
                }

                if (result.success) {
                    await Swal.fire({
                        title: 'Success!',
                        text: 'Product updated successfully',
                        icon: 'success',
                        confirmButtonText: 'OK'
                    });
                    window.location.href = '/admin/products';
                } else {
                    throw new Error(result.message || 'Failed to update product');
                }
            } catch (error) {
                console.error('Error updating product:', error);
                Swal.fire({
                    title: 'Error!',
                    text: error.message || 'An unexpected error occurred. Please try again.',
                    icon: 'error',
                    confirmButtonText: 'OK'
                });
            }
        });
    });
</script>

<%- include("../../views/partials/admin/footer") %>