<%- include("../../views/partials/admin/header") %>
<head>
   <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css">
   <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
   <script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script>
</head>
<style>
   :root {
       --primary-color: #B5D8CC;
       --secondary-color: #E8B4BC;
       --accent-color: #FFD9C0;
       --background-light: #F8F6F4;
       --text-primary: #6B7B8C;
       --danger-color: #FFB4B4;
   }

   .content-main {
       padding: 2rem;
       background: var(--background-light);
   }

   .content-header {
       margin-bottom: 2rem;
   }

   .content-title {
       color: var(--text-primary);
       font-size: 1.8rem;
       font-weight: 600;
       margin-bottom: 0.5rem;
   }

   .card {
       background: white;
       border-radius: 15px;
       border: 1px solid rgba(0,0,0,0.05);
       box-shadow: 0 5px 15px rgba(0,0,0,0.05);
       transition: transform 0.3s ease, box-shadow 0.3s ease;
   }

   .card:hover {
       transform: translateY(-5px);
       box-shadow: 0 8px 25px rgba(0,0,0,0.1);
   }

   .card-header {
       background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
       color: white;
       border-radius: 15px 15px 0 0;
       padding: 1.5rem;
   }

   .card-body {
       padding: 2rem;
   }

   .form-label {
       color: var(--text-primary);
       font-weight: 500;
       margin-bottom: 0.5rem;
   }

   .form-control {
       border-radius: 10px;
       border: 1px solid rgba(0,0,0,0.1);
       padding: 0.8rem;
       transition: all 0.3s ease;
   }

   .form-control:focus {
       box-shadow: 0 0 0 3px rgba(181, 216, 204, 0.3);
       border-color: var(--primary-color);
   }

   .form-select {
       border-radius: 10px;
       border: 1px solid rgba(0,0,0,0.1);
       padding: 0.8rem;
       background-color: white;
       transition: all 0.3s ease;
   }

   .form-select:focus {
       box-shadow: 0 0 0 3px rgba(181, 216, 204, 0.3);
       border-color: var(--primary-color);
   }

   .error-message {
       color: #dc3545;
       font-size: 13px;
       margin-top: 5px;
       display: block;
   }

   .form-control.is-invalid,
   .form-select.is-invalid {
       border-color: #dc3545 !important;
   }

   .form-control.is-invalid:focus,
   .form-select.is-invalid:focus {
       box-shadow: 0 0 0 3px rgba(220, 53, 69, 0.25) !important;
   }

   .btn-primary {
       background: var(--primary-color);
       border: none;
       padding: 0.8rem 1.5rem;
       border-radius: 10px;
       font-weight: 500;
       transition: all 0.3s ease;
   }

   .btn-primary:hover {
       background: var(--secondary-color);
       transform: translateY(-2px);
   }

   .image-preview-container {
       display: flex;
       gap: 20px;
       margin-top: 10px;
   }

   .image-upload-box {
       position: relative;
       width: 200px;
       height: 200px;
       border: 2px dashed #ccc;
       border-radius: 8px;
       overflow: hidden;
   }

   .image-preview {
       width: 100%;
       height: 100%;
       object-fit: cover;
   }

   .upload-overlay {
       position: absolute;
       top: 0;
       left: 0;
       width: 100%;
       height: 100%;
       display: flex;
       flex-direction: column;
       justify-content: center;
       align-items: center;
       background: rgba(255, 255, 255, 0.8);
       cursor: pointer;
   }

   .upload-overlay i {
       font-size: 2rem;
       color: #666;
       margin-bottom: 10px;
   }

   .upload-overlay.hidden {
       display: none;
   }

   .image-input {
       display: none;
   }

   .delete-preview {
       position: absolute;
       top: 10px;
       right: 10px;
       width: 30px;
       height: 30px;
       background-color: rgba(255, 255, 255, 0.9);
       border-radius: 50%;
       display: flex;
       justify-content: center;
       align-items: center;
       cursor: pointer;
       z-index: 10;
       transition: all 0.3s ease;
       opacity: 0;
   }

   .image-upload-box:hover .delete-preview {
       opacity: 1;
   }

   .delete-preview i {
       color: #dc3545;
       font-size: 1.2rem;
   }

   .has-image .upload-overlay {
       opacity: 0;
       pointer-events: none;
   }

   .has-image:hover .upload-overlay {
       opacity: 1;
       pointer-events: auto;
   }

   .modal {
       display: none;
       position: fixed;
       z-index: 1000;
       left: 0;
       top: 0;
       width: 100%;
       height: 100%;
       background-color: rgba(0,0,0,0.5);
   }

   .cropper-content {
       position: relative;
       background-color: white;
       margin: 2% auto;
       padding: 20px;
       width: 90%;
       max-width: 800px;
       border-radius: 15px;
   }

   .cropper-container {
       height: 500px;
       margin-bottom: 20px;
   }

   .cropper-actions {
       display: flex;
       gap: 10px;
       justify-content: center;
   }

   .cropper-actions button {
       padding: 10px 20px;
       border-radius: 8px;
       font-size: 14px;
   }

   .cropper-view-box,
   .cropper-face {
       background: none !important;
   }

   .cropper-modal {
       background: rgba(0, 0, 0, 0.5) !important;
   }

   .cropper-view-box {
       outline: 2px solid #fff;
       outline-color: var(--primary-color);
   }

   .cropper-container {
       background: white !important;
   }
</style>
<section class="content-main">
   <div class="row">
       <div class="col-9">
           <div class="content-header">
               <h2 class="content-title">Edit Product</h2>
           </div>
       </div>
       <div class="col-lg-12">
           <div class="card mb-4">
               <div class="card-body">
                   <form id="productForm" enctype="multipart/form-data">
                       <div class="mb-4">
                           <label for="product_name" class="form-label">Product Name</label>
                           <input type="text" placeholder="Type here" name="productName" class="form-control" id="product_name">
                           <small class="text-danger error-message" id="product_name-error"></small>
                       </div>

                       <div class="mb-4">
                           <label for="descriptionid" class="form-label">Description</label>
                           <textarea placeholder="Type here" name="description" class="form-control" id="descriptionid" rows="4"></textarea>
                           <small class="text-danger error-message" id="descriptionid-error"></small>
                       </div>

                       <div class="row">
                           <div class="col-lg-4">
                               <div class="mb-4">
                                   <label for="regularPrice" class="form-label">Regular Price</label>
                                   <input type="number" placeholder="₹" name="regularPrice" class="form-control" id="regularPrice">
                                   <small class="text-danger error-message" id="regularPrice-error"></small>
                               </div>
                           </div>
                           <div class="col-lg-4">
                               <div class="mb-4">
                                   <label for="salesPrice" class="form-label">Sale Price</label>
                                   <input type="number" placeholder="₹" name="salesPrice" class="form-control" id="salesPrice">
                                   <small class="text-danger error-message" id="salesPrice-error"></small>
                               </div>
                           </div>
                           <div class="col-lg-4">
                               <div class="mb-4">
                                   <label for="quantity" class="form-label">Quantity</label>
                                   <input type="number" placeholder="Quantity" name="quantity" class="form-control" id="quantity">
                                   <small class="text-danger error-message" id="quantity-error"></small>
                               </div>
                           </div>
                       </div>

                       <div class="row">
                           <div class="col-lg-4">
                               <div class="mb-4">
                                   <label for="color" class="form-label">Color</label>
                                   <input type="text" name="color" class="form-control" id="color">
                                   <small class="text-danger error-message" id="color-error"></small>
                               </div>
                           </div>
                           <div class="col-lg-4">
                               <div class="mb-4">
                                   <label for="category" class="form-label">Category</label>
                                   <select class="form-select" name="category" id="category">
                                       <option value="">Select Category</option>
                                       <% for(let i=0; i<cat.length; i++) { %>
                                           <option value="<%=cat[i]._id%>">
                                               <%=cat[i].name%>
                                           </option>
                                       <% } %>
                                   </select>
                                   <small class="text-danger error-message" id="category-error"></small>
                               </div>
                           </div>
                       </div>

                       <div class="card mb-4">
                           <div class="card-header">
                               <h4>Product Images</h4>
                               <p class="text-muted">Upload up to 3 images of your product</p>
                           </div>
                           <div class="card-body">
                               <div class="image-preview-container">
                                   <div class="image-upload-box" id="preview-1">
                                       <img src="" alt="Preview 1" id="imgView1" class="image-preview">
                                       <div class="delete-preview" onclick="deletePreview(1)">
                                           <i class="fas fa-times"></i>
                                       </div>
                                       <div class="upload-overlay" onclick="document.getElementById('input1').click()">
                                           <i class="fas fa-cloud-upload-alt"></i>
                                           <span>Upload Image</span>
                                       </div>
                                       <input class="image-input" type="file" name="images" id="input1"
                                           accept="image/png, image/jpeg, image/jpg" onchange="viewImage1(event)">
                                   </div>

                                   <div class="image-upload-box" id="preview-2">
                                       <img src="" alt="Preview 2" id="imgView2" class="image-preview">
                                       <div class="delete-preview" onclick="deletePreview(2)">
                                           <i class="fas fa-times"></i>
                                       </div>
                                       <div class="upload-overlay" onclick="document.getElementById('input2').click()">
                                           <i class="fas fa-cloud-upload-alt"></i>
                                           <span>Upload Image</span>
                                       </div>
                                       <input class="image-input" type="file" name="images" id="input2"
                                           accept="image/png, image/jpeg, image/jpg" onchange="viewImage2(event)">
                                   </div>

                                   <div class="image-upload-box" id="preview-3">
                                       <img src="" alt="Preview 3" id="imgView3" class="image-preview">
                                       <div class="delete-preview" onclick="deletePreview(3)">
                                           <i class="fas fa-times"></i>
                                       </div>
                                       <div class="upload-overlay" onclick="document.getElementById('input3').click()">
                                           <i class="fas fa-cloud-upload-alt"></i>
                                           <span>Upload Image</span>
                                       </div>
                                       <input class="image-input" type="file" name="images" id="input3"
                                           accept="image/png, image/jpeg, image/jpg" onchange="viewImage3(event)">
                                   </div>
                               </div>
                               <small class="text-danger error-message" id="images-error"></small>
                           </div>
                       </div>

                       <div class="text-end">
                           <button type="submit" class="btn btn-primary">Update Product</button>
                       </div>
                   </form>
               </div>
           </div>
       </div>
   </div>
</section>

<!-- Image Cropper Modal -->
<div id="cropperModal" class="modal">
    <div class="cropper-content">
        <div class="cropper-container">
            <img id="cropperImage" src="" alt="Image to crop">
        </div>
        <div class="cropper-actions">
            <button type="button" class="btn btn-primary" onclick="zoomOut()">
                <i class="fas fa-search-minus"></i> Zoom Out
            </button>
            <button type="button" class="btn btn-primary" onclick="zoomIn()">
                <i class="fas fa-search-plus"></i> Zoom In
            </button>
            <button type="button" class="btn btn-primary" onclick="rotate()">
                <i class="fas fa-redo"></i> Rotate
            </button>
            <button type="button" class="btn btn-primary" onclick="cropImage()">
                <i class="fas fa-crop"></i> Crop & Save
            </button>
            <button type="button" class="btn btn-primary" onclick="closeCropperModal()">
                <i class="fas fa-times"></i> Cancel
            </button>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
    let currentFile = null;
    let currentImageBox = null;
    let cropper = null;
    let deletedImages = [];

    // Function to delete image preview
    function deletePreview(boxNumber) {
        Swal.fire({
            title: 'Are you sure?',
            text: "You won't be able to revert this!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, delete it!'
        }).then((result) => {
            if (result.isConfirmed) {
                const preview = document.getElementById(`imgView${boxNumber}`);
                const previewContainer = document.getElementById(`preview-${boxNumber}`);
                const input = document.getElementById(`input${boxNumber}`);
                const originalImage = preview.getAttribute('data-original');

                if (originalImage) {
                    // If this was an existing image, add it to deletedImages array
                    deletedImages.push(originalImage);
                }

                // Clear the preview
                preview.src = '';
                preview.removeAttribute('data-original');
                previewContainer.classList.remove('has-image');
                input.value = '';

                Swal.fire(
                    'Deleted!',
                    'Your image has been deleted.',
                    'success'
                )
            }
        });
    }

    // Function to handle image preview for each input
    function viewImage1(event) {
        handleImagePreview(event, 1);
    }

    function viewImage2(event) {
        handleImagePreview(event, 2);
    }

    function viewImage3(event) {
        handleImagePreview(event, 3);
    }

    function handleImagePreview(event, boxNumber) {
        const file = event.target.files[0];
        if (!file) return;

        // Validate file size (5MB limit)
        if (file.size > 5 * 1024 * 1024) {
            Swal.fire({
                icon: 'error',
                title: 'File too large',
                text: 'Please select an image less than 5MB'
            });
            event.target.value = '';
            return;
        }

        // Validate file type
        if (!['image/jpeg', 'image/jpg', 'image/png'].includes(file.type)) {
            Swal.fire({
                icon: 'error',
                title: 'Invalid file type',
                text: 'Please select a JPG or PNG image'
            });
            event.target.value = '';
            return;
        }

        currentFile = file;
        currentImageBox = boxNumber;

        const reader = new FileReader();
        reader.onload = function(e) {
            const cropperImage = document.getElementById('cropperImage');
            cropperImage.src = e.target.result;
            
            // Initialize cropper
            if (cropper) {
                cropper.destroy();
            }

            cropper = new Cropper(cropperImage, {
                aspectRatio: 1,
                viewMode: 2,
                dragMode: 'move',
                autoCropArea: 1,
                restore: false,
                guides: true,
                center: true,
                highlight: false,
                cropBoxMovable: true,
                cropBoxResizable: true,
                toggleDragModeOnDblclick: false,
            });

            // Show modal
            const modal = document.getElementById('cropperModal');
            modal.style.display = 'block';
        };
        reader.readAsDataURL(file);
    }

    function closeCropperModal() {
        const modal = document.getElementById('cropperModal');
        modal.style.display = 'none';
        if (cropper) {
            cropper.destroy();
            cropper = null;
        }
        if (currentImageBox) {
            const preview = document.getElementById(`imgView${currentImageBox}`);
            if (!preview.src || preview.src === '') {
                document.getElementById(`input${currentImageBox}`).value = '';
            }
        }
    }

    function cropImage() {
        if (!cropper) return;

        const canvas = cropper.getCroppedCanvas({
            width: 800,
            height: 800,
            imageSmoothingEnabled: true,
            imageSmoothingQuality: 'high',
        });

        canvas.toBlob((blob) => {
            // Create a new File object
            const fileName = `cropped-${Date.now()}-${currentFile.name}`;
            const croppedFile = new File([blob], fileName, { type: 'image/jpeg' });
            
            // Update the file input and preview
            const input = document.getElementById(`input${currentImageBox}`);
            const preview = document.getElementById(`imgView${currentImageBox}`);
            const previewContainer = document.getElementById(`preview-${currentImageBox}`);
            
            // Create a FileList-like object
            const dataTransfer = new DataTransfer();
            dataTransfer.items.add(croppedFile);
            input.files = dataTransfer.files;
            
            // Update preview
            preview.src = URL.createObjectURL(croppedFile);
            preview.removeAttribute('data-original'); // Remove data-original as this is a new image
            previewContainer.classList.add('has-image');
            
            // Close modal
            closeCropperModal();
        }, 'image/jpeg', 0.9);
    }

    document.addEventListener('DOMContentLoaded', function() {
        const form = document.getElementById('productForm');
        let isSubmitting = false;

        // Function to show error messages
        function showError(input, errorId, message) {
            input.classList.add('is-invalid');
            const errorElement = document.getElementById(errorId);
            if (errorElement) {
                errorElement.textContent = message;
            }
        }

        // Function to clear error messages
        function clearErrors() {
            document.querySelectorAll('.error-message').forEach(error => {
                error.textContent = '';
            });
            document.querySelectorAll('.form-control, .form-select').forEach(input => {
                input.classList.remove('is-invalid');
            });
        }

        // Initialize form with existing product data
        const product = <%- JSON.stringify(product) %>;
        if (product) {
            document.getElementById('product_name').value = product.productName || '';
            document.getElementById('descriptionid').value = product.description || '';
            document.getElementById('regularPrice').value = product.regularPrice || '';
            document.getElementById('salesPrice').value = product.salesPrice || '';
            document.getElementById('quantity').value = product.quantity || '';
            document.getElementById('color').value = product.color || '';
            document.getElementById('category').value = product.category || '';

            // Initialize existing images
            if (product.productImage) {
                product.productImage.forEach((image, index) => {
                    if (image) {
                        const preview = document.getElementById(`imgView${index + 1}`);
                        const previewContainer = document.getElementById(`preview-${index + 1}`);
                        if (preview && previewContainer) {
                            preview.src = `/uploads/product-images/${image}`;
                            preview.setAttribute('data-original', image); // Store original image name
                            previewContainer.classList.add('has-image');
                        }
                    }
                });
            }
        }

        form.addEventListener('submit', async function(event) {
            event.preventDefault();
            
            if (isSubmitting) {
                console.log('Form is already being submitted');
                return;
            }

            console.log('Starting form submission');
            isSubmitting = true;
            clearErrors();

            // Get form data
            const formData = new FormData(this);
            
            // Add deleted images to formData
            if (deletedImages.length > 0) {
                formData.append('deletedImages', JSON.stringify(deletedImages));
            }

            let isValid = true;

            // Validation checks
            const validations = [
                {
                    field: 'productName',
                    inputId: 'product_name',
                    errorId: 'product_name-error',
                    message: 'Product name is required',
                    validate: value => value && value.trim() !== ''
                },
                {
                    field: 'description',
                    inputId: 'descriptionid',
                    errorId: 'descriptionid-error',
                    message: 'Description is required',
                    validate: value => value && value.trim() !== ''
                },
                {
                    field: 'regularPrice',
                    inputId: 'regularPrice',
                    errorId: 'regularPrice-error',
                    message: 'Regular price must be greater than 0',
                    validate: value => value && value > 0
                },
                {
                    field: 'salesPrice',
                    inputId: 'salesPrice',
                    errorId: 'salesPrice-error',
                    message: 'Sales price must be greater than 0',
                    validate: value => value && value > 0
                },
                {
                    field: 'quantity',
                    inputId: 'quantity',
                    errorId: 'quantity-error',
                    message: 'Quantity must be 0 or greater',
                    validate: value => value !== '' && value >= 0
                },
                {
                    field: 'color',
                    inputId: 'color',
                    errorId: 'color-error',
                    message: 'Color is required',
                    validate: value => value && value.trim() !== ''
                },
                {
                    field: 'category',
                    inputId: 'category',
                    errorId: 'category-error',
                    message: 'Please select a category',
                    validate: value => value && value !== ''
                }
            ];

            // Perform validations
            validations.forEach(validation => {
                const value = formData.get(validation.field);
                if (!validation.validate(value)) {
                    showError(
                        form.querySelector(`#${validation.inputId}`),
                        validation.errorId,
                        validation.message
                    );
                    isValid = false;
                }
            });

            // Image validation for new uploads
            const imageInputs = form.querySelectorAll('input[type="file"]');
            for (const input of imageInputs) {
                if (input.files && input.files.length > 0) {
                    const file = input.files[0];
                    
                    if (!['image/jpeg', 'image/jpg', 'image/png'].includes(file.type)) {
                        document.getElementById('images-error').textContent = 'Please upload only JPG or PNG images';
                        isValid = false;
                        break;
                    }
                    
                    if (file.size > 5 * 1024 * 1024) {
                        document.getElementById('images-error').textContent = 'Image size should be less than 5MB';
                        isValid = false;
                        break;
                    }
                }
            }

            if (!isValid) {
                isSubmitting = false;
                return;
            }

            try {
                const productId = '<%= product._id %>';
                const response = await fetch(`/admin/updateProduct/${productId}`, {
                    method: 'POST',
                    body: formData
                });

                const result = await response.json();
                console.log('Server response:', result);

                if (!response.ok) {
                    throw new Error(result.message || 'Failed to update product');
                }

                if (result.success) {
                    await Swal.fire({
                        icon: 'success',
                        title: 'Success!',
                        text: 'Product updated successfully',
                        showConfirmButton: false,
                        timer: 1500
                    });
                    window.location.href = '/admin/products';
                } else {
                    throw new Error(result.message || 'Failed to update product');
                }
            } catch (error) {
                console.error('Error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: error.message || 'An error occurred while updating the product'
                });
            } finally {
                isSubmitting = false;
            }
        });
    });

    // Helper functions for cropper
    function zoomIn() {
        if (cropper) cropper.zoom(0.1);
    }

    function zoomOut() {
        if (cropper) cropper.zoom(-0.1);
    }

    function rotate() {
        if (cropper) cropper.rotate(90);
    }
</script>

<%- include("../../views/partials/admin/footer") %>