<%- include("../../views/partials/admin/header") %>
<head>
   <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css">
</head>
<style>
   :root {
       --primary-color: #B5D8CC;
       --secondary-color: #E8B4BC;
       --accent-color: #FFD9C0;
       --background-light: #F8F6F4;
       --text-primary: #6B7B8C;
       --danger-color: #FFB4B4;
   }

   .content-main {
       padding: 2rem;
       background: var(--background-light);
   }

   .content-header {
       margin-bottom: 2rem;
   }

   .content-title {
       color: var(--text-primary);
       font-size: 1.8rem;
       font-weight: 600;
       margin-bottom: 0.5rem;
   }

   .card {
       background: white;
       border-radius: 15px;
       border: 1px solid rgba(0,0,0,0.05);
       box-shadow: 0 5px 15px rgba(0,0,0,0.05);
       transition: transform 0.3s ease, box-shadow 0.3s ease;
   }

   .card:hover {
       transform: translateY(-5px);
       box-shadow: 0 8px 25px rgba(0,0,0,0.1);
   }

   .card-header {
       background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
       color: white;
       border-radius: 15px 15px 0 0;
       padding: 1.5rem;
   }

   .card-body {
       padding: 2rem;
   }

   .form-label {
       color: var(--text-primary);
       font-weight: 500;
       margin-bottom: 0.5rem;
   }

   .form-control {
       border-radius: 10px;
       border: 1px solid rgba(0,0,0,0.1);
       padding: 0.8rem;
       transition: all 0.3s ease;
   }

   .form-control:focus {
       box-shadow: 0 0 0 3px rgba(181, 216, 204, 0.3);
       border-color: var(--primary-color);
   }

   .form-select {
       border-radius: 10px;
       border: 1px solid rgba(0,0,0,0.1);
       padding: 0.8rem;
       background-color: white;
       transition: all 0.3s ease;
   }

   .form-select:focus {
       box-shadow: 0 0 0 3px rgba(181, 216, 204, 0.3);
       border-color: var(--primary-color);
   }

   .error-message {
       color: var(--danger-color);
       font-size: 0.85rem;
       margin-top: 0.3rem;
   }

   .thumbnails-container {
       display: flex;
       gap: 1rem;
       padding: 1rem;
       overflow-x: auto;
       scrollbar-width: thin;
       scrollbar-color: var(--secondary-color) var(--background-light);
   }

   .thumbnail {
       flex: 0 0 auto;
       border-radius: 10px;
       overflow: hidden;
       box-shadow: 0 3px 10px rgba(0,0,0,0.1);
       transition: transform 0.3s ease;
   }

   .thumbnail:hover {
       transform: scale(1.05);
   }

   .image-upload-container {
       border: 2px dashed var(--primary-color);
       border-radius: 10px;
       padding: 2rem;
       text-align: center;
       transition: all 0.3s ease;
   }

   .image-upload-container:hover {
       background: rgba(181, 216, 204, 0.1);
   }

   .btn-primary {
       background: var(--primary-color);
       border: none;
       border-radius: 10px;
       padding: 0.8rem 1.5rem;
       color: white;
       font-weight: 500;
       transition: all 0.3s ease;
   }

   .btn-primary:hover {
       background: var(--secondary-color);
       transform: translateY(-2px);
   }

   /* Custom scrollbar */
   ::-webkit-scrollbar {
       width: 8px;
       height: 8px;
   }

   ::-webkit-scrollbar-track {
       background: var(--background-light);
       border-radius: 4px;
   }

   ::-webkit-scrollbar-thumb {
       background: var(--secondary-color);
       border-radius: 4px;
   }

   ::-webkit-scrollbar-thumb:hover {
       background: var(--primary-color);
   }

   /* Image preview animations */
   @keyframes fadeIn {
       from { opacity: 0; transform: scale(0.9); }
       to { opacity: 1; transform: scale(1); }
   }

   .imgView {
       max-width: 100%;
       border-radius: 10px;
       animation: fadeIn 0.3s ease-out;
   }

   /* Responsive adjustments */
   @media (max-width: 768px) {
       .content-main {
           padding: 1rem;
       }

       .card-body {
           padding: 1.5rem;
       }
   }

   /* Image Upload Styles */
   .image-upload-grid {
       display: grid;
       grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
       gap: 1.5rem;
       margin-bottom: 2rem;
   }

   .image-upload-box {
       position: relative;
       min-height: 200px;
       border: 2px dashed var(--primary-color);
       border-radius: 12px;
       overflow: hidden;
       background: rgba(181, 216, 204, 0.05);
       transition: all 0.3s ease;
   }

   .image-upload-box:hover {
       border-color: var(--secondary-color);
       background: rgba(181, 216, 204, 0.1);
       transform: translateY(-2px);
   }

   .preview-container {
       position: absolute;
       top: 0;
       left: 0;
       width: 100%;
       height: 100%;
       display: none;
       z-index: 1;
   }

   .preview-container.has-image {
       display: block;
   }

   .preview-image {
       width: 100%;
       height: 100%;
       object-fit: cover;
       border-radius: 10px;
   }

   .upload-content {
       position: relative;
       width: 100%;
       height: 100%;
       display: flex;
       flex-direction: column;
       align-items: center;
       justify-content: center;
       padding: 2rem;
       text-align: center;
   }

   .upload-icon {
       font-size: 3rem;
       color: var(--primary-color);
       margin-bottom: 1rem;
   }

   .upload-text h5 {
       color: var(--text-primary);
       margin-bottom: 0.5rem;
       font-weight: 500;
   }

   .upload-text p {
       color: var(--text-secondary);
       font-size: 0.9rem;
       margin: 0;
   }

   .image-input {
       position: absolute;
       top: 0;
       left: 0;
       width: 100%;
       height: 100%;
       opacity: 0;
       cursor: pointer;
       z-index: 2;
   }

   /* Image preview animation */
   @keyframes fadeIn {
       from { opacity: 0; transform: scale(0.9); }
       to { opacity: 1; transform: scale(1); }
   }

   .preview-container.has-image {
       animation: fadeIn 0.3s ease-out;
   }

   /* Remove button */
   .remove-image {
       position: absolute;
       top: 0.5rem;
       right: 0.5rem;
       background: rgba(255, 255, 255, 0.9);
       border: none;
       border-radius: 50%;
       width: 30px;
       height: 30px;
       display: flex;
       align-items: center;
       justify-content: center;
       cursor: pointer;
       z-index: 3;
       transition: all 0.3s ease;
   }

   .remove-image:hover {
       background: var(--danger-color);
       color: white;
   }

   /* Image Cropper Styles */
   .cropper-modal {
       display: none;
       position: fixed;
       z-index: 9999;
       left: 0;
       top: 0;
       width: 100%;
       height: 100%;
       background: rgba(0, 0, 0, 0.8);
       backdrop-filter: blur(5px);
   }

   .cropper-content {
       background: #ffffff;
       margin: 2% auto;
       padding: 25px;
       width: 90%;
       max-width: 1000px;
       border-radius: 10px;
       box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
       position: relative;
   }

   .cropper-container {
       background: #ffffff;
       border: 1px solid #ddd;
       border-radius: 8px;
       overflow: hidden;
       margin-bottom: 20px;
       height: 70vh;
   }

   #cropperImage {
       max-width: 100%;
       max-height: 100%;
       display: block;
   }

   .cropper-actions {
       background: #f8f9fa;
       padding: 15px;
       border-radius: 8px;
       display: flex;
       gap: 10px;
       justify-content: center;
       flex-wrap: wrap;
   }

   .cropper-actions button {
       min-width: 120px;
       padding: 10px 20px;
       border: none;
       border-radius: 5px;
       cursor: pointer;
       font-weight: 500;
       font-size: 14px;
       display: flex;
       align-items: center;
       justify-content: center;
       gap: 8px;
       transition: all 0.3s ease;
   }

   .cropper-actions button i {
       font-size: 16px;
   }

   .btn-primary {
       background: #4CAF50;
       color: white;
   }

   .btn-success {
       background: #2196F3;
       color: white;
   }

   .btn-secondary {
       background: #757575;
       color: white;
   }

   .cropper-actions button:hover {
       transform: translateY(-2px);
       box-shadow: 0 3px 8px rgba(0, 0, 0, 0.2);
   }

   /* Override Cropper.js styles */
   .cropper-view-box,
   .cropper-face {
       border-radius: 0;
   }

   .cropper-bg {
       background-image: none !important;
       background-color: #ffffff !important;
   }

   .cropper-modal {
       opacity: 1 !important;
       background: white !important;
   }

   .cropper-container {
       background: white !important;
   }

   /* Close button */
   .modal-close {
       position: absolute;
       right: 20px;
       top: 20px;
       background: #ff4444;
       color: white;
       border: none;
       border-radius: 50%;
       width: 30px;
       height: 30px;
       display: flex;
       align-items: center;
       justify-content: center;
       cursor: pointer;
       transition: all 0.3s ease;
   }

   .modal-close:hover {
       background: #cc0000;
       transform: rotate(90deg);
   }

   /* Image upload box styles */
   .image-upload-grid {
       display: grid;
       grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
       gap: 20px;
       margin-bottom: 20px;
   }

   .image-upload-box {
       position: relative;
       width: 100%;
       padding-top: 100%;
       border: 2px dashed var(--primary-color);
       border-radius: 8px;
       background: rgba(181, 216, 204, 0.05);
       transition: all 0.3s ease;
   }

   .image-upload-box:hover {
       border-color: var(--secondary-color);
       background: rgba(181, 216, 204, 0.1);
   }

   .preview-container {
       position: absolute;
       top: 0;
       left: 0;
       width: 100%;
       height: 100%;
       display: none;
   }

   .preview-container.has-image {
       display: block;
   }

   .preview-image {
       width: 100%;
       height: 100%;
       object-fit: cover;
       border-radius: 6px;
   }

   .upload-content {
       position: absolute;
       top: 0;
       left: 0;
       width: 100%;
       height: 100%;
       display: flex;
       flex-direction: column;
       align-items: center;
       justify-content: center;
       text-align: center;
       padding: 20px;
   }

   .upload-icon {
       font-size: 40px;
       color: var(--primary-color);
       margin-bottom: 10px;
   }

   .upload-text h5 {
       margin: 0;
       color: #333;
       font-size: 16px;
   }

   .upload-text p {
       margin: 5px 0 0;
       color: #666;
       font-size: 14px;
   }

   .image-input {
       position: absolute;
       width: 100%;
       height: 100%;
       top: 0;
       left: 0;
       opacity: 0;
       cursor: pointer;
   }

   .remove-image {
       position: absolute;
       top: 10px;
       right: 10px;
       background: rgba(255, 255, 255, 0.9);
       border: none;
       border-radius: 50%;
       width: 30px;
       height: 30px;
       display: flex;
       align-items: center;
       justify-content: center;
       cursor: pointer;
       z-index: 1;
   }

   .remove-image:hover {
       background: white;
   }

   /* Thumbnails */
   .thumbnails-container {
       display: flex;
       gap: 10px;
       flex-wrap: wrap;
   }

   .thumbnail {
       position: relative;
   }

   .preview-container.has-image .upload-content {
       display: none;
   }
</style>
<section class="content-main">
   <div class="row">
       <div class="col-9">
           <div class="content-header">
               <h2 class="content-title">Add New Product</h2>
           </div>
       </div>
       <div class="col-lg-6">
           <div class="card mb-4">
               <div class="card-body">
                   <form method="post" action="/admin/addProducts" enctype="multipart/form-data" id="productForm">
                       <div class="mb-4">
                           <label for="product_name" class="form-label">Product Name</label>
                           <input type="text" placeholder="Type here" name="product" class="form-control border" id="product_name" required>
                           <div id="product_name-error" class="error-message"></div>
                       </div>
                       <div class="mb-4">
                           <label class="form-label">Full description</label>
                           <textarea placeholder="Type here" id="descriptionid" name="description" class="form-control border" rows="4" required></textarea>
                           <div id="descriptionid-error" class="error-message"></div>
                       </div>
                       <div class="row">
                           <div class="col-lg-4">
                               <div class="mb-4">
                                   <label class="form-label">Regular price</label>
                                   <input placeholder="₹" name="regularPrice" type="number" class="form-control border" id="regularPrice" required>
                                   <div id="regularPrice-error" class="error-message"></div>
                               </div>
                           </div>
                           <div class="col-lg-4">
                               <div class="mb-4">
                                   <label class="form-label">Sale price</label>
                                   <input placeholder="₹" name="salesPrice" type="number" class="form-control border" id="salesPrice" required>
                                   <div id="salesPrice-error" class="error-message"></div>
                               </div>
                           </div>
                           <div class="col-lg-4">
                               <div class="mb-4">
                                   <label class="form-label">Quantity</label>
                                   <input placeholder="Quantity" name="quantity" type="number" class="form-control border" id="quantity" required>
                                   <div id="quantity-error" class="error-message"></div>
                               </div>
                           </div>
                       </div>
                       <div class="row">
                           <div class="col-lg-4">
                               <div class="mb-4">
                                   <label class="form-label">Color</label>
                                   <input name="color" type="text" class="form-control border" id="color" required>
                                   <div id="color-error" class="error-message"></div>
                               </div>
                           </div>
                       </div>
                       <div class="card mb-4">
                           <div class="card-body">
                               <div class="row gx-2">
                                   <div class="col-sm-6 mb-3">
                                       <label class="form-label">Category</label>
                                       <select class="form-select border" name="category" id="category" required>
                                           <option value="">Select Category</option>
                                           <%for(let i=0;i<cat.length;i++){%>
                                               <option value="<%=cat[i]._id%>"><%=cat[i].name%></option>
                                           <%}%>
                                       </select>
                                       <div id="category-error" class="error-message"></div>
                                   </div>
                               </div>
                           </div>
                       </div>
                       <div class="card mb-2">
                           <div class="card-header">
                               <h4>Product Images</h4>
                               <p class="text-muted">Upload up to 3 images of your product</p>
                           </div>
                           <div class="card-body">
                               <div class="image-upload-grid">
                                   <!-- Image Upload Box 1 -->
                                   <div class="image-upload-box" id="upload-box-1">
                                       <div class="preview-container" id="preview-1">
                                           <img src="" alt="" id="imgView1" class="preview-image">
                                       </div>
                                       <div class="upload-content">
                                           <i class="material-icons upload-icon">cloud_upload</i>
                                           <div class="upload-text">
                                               <h5>Drop image here</h5>
                                               <p>or click to browse</p>
                                           </div>
                                           <input class="form-control image-input" type="file" name="images" id="input1"
                                               accept="image/png, image/jpeg, image/jpg"
                                               onchange="viewImage1(event)">
                                           <div id="images-error" class="error-message"></div>
                                       </div>
                                   </div>

                                   <!-- Image Upload Box 2 -->
                                   <div class="image-upload-box" id="upload-box-2">
                                       <div class="preview-container" id="preview-2">
                                           <img src="" alt="" id="imgView2" class="preview-image">
                                       </div>
                                       <div class="upload-content">
                                           <i class="material-icons upload-icon">cloud_upload</i>
                                           <div class="upload-text">
                                               <h5>Drop image here</h5>
                                               <p>or click to browse</p>
                                           </div>
                                           <input class="form-control image-input" type="file" name="images" id="input2"
                                               accept="image/png, image/jpeg, image/jpg"
                                               onchange="viewImage2(event)">
                                       </div>
                                   </div>

                                   <!-- Image Upload Box 3 -->
                                   <div class="image-upload-box" id="upload-box-3">
                                       <div class="preview-container" id="preview-3">
                                           <img src="" alt="" id="imgView3" class="preview-image">
                                       </div>
                                       <div class="upload-content">
                                           <i class="material-icons upload-icon">cloud_upload</i>
                                           <div class="upload-text">
                                               <h5>Drop image here</h5>
                                               <p>or click to browse</p>
                                           </div>
                                           <input class="form-control image-input" type="file" name="images" id="input3"
                                               accept="image/png, image/jpeg, image/jpg"
                                               onchange="viewImage3(event)">
                                       </div>
                                   </div>
                               </div>

                               <!-- Thumbnails Preview -->
                               <div class="thumbnails-container mt-4" id="addedImagesContainer"></div>
                           </div>
                       </div>
                       <div>
                           <button type="submit" class="btn btn-md rounded font-sm hover-up">Publish</button>
                       </div>
                   </form>
               </div>
           </div>
       </div>
   </div>
</section>

<!-- Image Cropper Modal -->
<div id="cropperModal" class="cropper-modal">
    <div class="cropper-content">
        <button class="modal-close" onclick="closeCropperModal()">
            <i class="fas fa-times"></i>
        </button>
        <div class="cropper-container">
            <img id="cropperImage" src="" alt="Image to crop">
        </div>
        <div class="cropper-actions">
            <button type="button" class="btn btn-primary" onclick="zoomIn()">
                <i class="fas fa-search-plus"></i> Zoom In
            </button>
            <button type="button" class="btn btn-primary" onclick="zoomOut()">
                <i class="fas fa-search-minus"></i> Zoom Out
            </button>
            <button type="button" class="btn btn-primary" onclick="rotateImage()">
                <i class="fas fa-redo"></i> Rotate
            </button>
            <button type="button" class="btn btn-success" onclick="cropImage()">
                <i class="fas fa-crop"></i> Crop
            </button>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script>

<script>
// Function to handle image preview for each input
function viewImage1(event) {
    const file = event.target.files[0];
    const preview = document.getElementById('imgView1');
    const previewContainer = document.getElementById('preview-1');
    handleImagePreview(file, preview, previewContainer, 1);
}

function viewImage2(event) {
    const file = event.target.files[0];
    const preview = document.getElementById('imgView2');
    const previewContainer = document.getElementById('preview-2');
    handleImagePreview(file, preview, previewContainer, 2);
}

function viewImage3(event) {
    const file = event.target.files[0];
    const preview = document.getElementById('imgView3');
    const previewContainer = document.getElementById('preview-3');
    handleImagePreview(file, preview, previewContainer, 3);
}

// Common function to handle image preview
function handleImagePreview(file, preview, previewContainer, boxNumber) {
    if (file) {
        const reader = new FileReader();
        reader.onload = function(e) {
            preview.src = e.target.result;
            preview.style.display = 'block';
            previewContainer.classList.add('has-image');
            
            // Add remove button if it doesn't exist
            if (!previewContainer.querySelector('.remove-image')) {
                const removeBtn = document.createElement('button');
                removeBtn.className = 'remove-image';
                removeBtn.innerHTML = '<i class="material-icons">close</i>';
                removeBtn.onclick = function(e) {
                    e.preventDefault();
                    removeImage(boxNumber);
                };
                previewContainer.appendChild(removeBtn);
            }

            // Add thumbnail to container
            addThumbnail(e.target.result, boxNumber);
            
            // Open cropper modal
            openCropperModal(boxNumber, e.target.result);
        };
        reader.readAsDataURL(file);
    }
}

// Function to remove image
function removeImage(boxNumber) {
    const preview = document.getElementById(`imgView${boxNumber}`);
    const input = document.getElementById(`input${boxNumber}`);
    const previewContainer = document.getElementById(`preview-${boxNumber}`);
    const thumbnail = document.querySelector(`.thumbnail[data-box="${boxNumber}"]`);

    preview.src = '';
    preview.style.display = 'none';
    input.value = '';
    previewContainer.classList.remove('has-image');

    const removeBtn = previewContainer.querySelector('.remove-image');
    if (removeBtn) {
        removeBtn.remove();
    }

    if (thumbnail) {
        thumbnail.remove();
    }
}

// Function to add thumbnail
function addThumbnail(src, boxNumber) {
    const container = document.getElementById('addedImagesContainer');
    const existingThumbnail = container.querySelector(`.thumbnail[data-box="${boxNumber}"]`);

    if (existingThumbnail) {
        existingThumbnail.remove();
    }

    const thumbnail = document.createElement('div');
    thumbnail.className = 'thumbnail';
    thumbnail.setAttribute('data-box', boxNumber);
    
    const img = document.createElement('img');
    img.src = src;
    img.style.width = '100px';
    img.style.height = '100px';
    img.style.objectFit = 'cover';
    img.style.borderRadius = '8px';
    
    thumbnail.appendChild(img);
    container.appendChild(thumbnail);
}

// Add drag and drop functionality
document.addEventListener('DOMContentLoaded', function() {
    const uploadBoxes = document.querySelectorAll('.image-upload-box');
    
    uploadBoxes.forEach(box => {
        box.addEventListener('dragover', (e) => {
            e.preventDefault();
            box.style.borderColor = getComputedStyle(document.documentElement)
                .getPropertyValue('--secondary-color').trim();
            box.style.background = 'rgba(181, 216, 204, 0.2)';
        });

        box.addEventListener('dragleave', (e) => {
            e.preventDefault();
            box.style.borderColor = getComputedStyle(document.documentElement)
                .getPropertyValue('--primary-color').trim();
            box.style.background = 'rgba(181, 216, 204, 0.05)';
        });

        box.addEventListener('drop', (e) => {
            e.preventDefault();
            box.style.borderColor = getComputedStyle(document.documentElement)
                .getPropertyValue('--primary-color').trim();
            box.style.background = 'rgba(181, 216, 204, 0.05)';
            
            const boxNumber = box.id.split('-')[2];
            const input = document.getElementById(`input${boxNumber}`);
            const file = e.dataTransfer.files[0];
            
            if (file && file.type.startsWith('image/')) {
                const dataTransfer = new DataTransfer();
                dataTransfer.items.add(file);
                input.files = dataTransfer.files;
                
                // Trigger the appropriate view function
                const event = new Event('change', { bubbles: true });
                input.dispatchEvent(event);
                
                switch(boxNumber) {
                    case '1':
                        viewImage1({ target: { files: [file] } });
                        break;
                    case '2':
                        viewImage2({ target: { files: [file] } });
                        break;
                    case '3':
                        viewImage3({ target: { files: [file] } });
                        break;
                }
            }
        });
    });
});

// Form validation
function validateForm(event) {
    event.preventDefault();
    let isValid = true;
    
    // Clear previous error messages
    document.querySelectorAll('.error-message').forEach(el => el.textContent = '');

    // Validate required fields
    const fields = {
        'product_name': 'Product Name',
        'descriptionid': 'Description',
        'regularPrice': 'Regular Price',
        'salesPrice': 'Sales Price',
        'quantity': 'Quantity',
        'color': 'Color',
        'category': 'Category'
    };

    for (const [id, label] of Object.entries(fields)) {
        const field = document.getElementById(id);
        if (!field || !field.value.trim()) {
            const errorDiv = document.getElementById(`${id}-error`);
            if (errorDiv) {
                errorDiv.textContent = `${label} is required`;
            }
            isValid = false;
        }
    }

    // Validate images
    const imageInputs = document.querySelectorAll('input[type="file"]');
    let hasImage = false;
    imageInputs.forEach(input => {
        if (input.files && input.files.length > 0) {
            hasImage = true;
        }
    });

    if (!hasImage) {
        const errorDiv = document.getElementById('images-error');
        if (errorDiv) {
            errorDiv.textContent = 'At least one image is required';
        }
        isValid = false;
    }

    if (isValid) {
        document.getElementById('productForm').submit();
    }
}

// Add form submit event listener
document.getElementById('productForm').addEventListener('submit', validateForm);

let cropper = null;
let currentImageBox = null;

function openCropperModal(boxNumber, imageUrl) {
    currentImageBox = boxNumber;
    const modal = document.getElementById('cropperModal');
    const image = document.getElementById('cropperImage');
    
    modal.style.display = 'block';
    image.src = imageUrl;
    
    if (cropper) {
        cropper.destroy();
    }
    
    cropper = new Cropper(image, {
        aspectRatio: 1,
        viewMode: 2,
        dragMode: 'move',
        autoCropArea: 0.8,
        restore: false,
        guides: true,
        center: true,
        highlight: false,
        cropBoxMovable: true,
        cropBoxResizable: true,
        toggleDragModeOnDblclick: true,
        background: false,
        modal: false,
        checkCrossOrigin: false,
        zoomable: true,
        scalable: true,
        rotatable: true,
        responsive: true,
        checkOrientation: true,
        minContainerWidth: 200,
        minContainerHeight: 100,
    });

    // Force white background
    document.querySelector('.cropper-modal').style.backgroundColor = '#ffffff';
    document.querySelector('.cropper-canvas').style.backgroundColor = '#ffffff';
    document.querySelector('.cropper-view-box').style.backgroundColor = '#ffffff';
}

function closeCropperModal() {
    const modal = document.getElementById('cropperModal');
    modal.style.display = 'none';
    if (cropper) {
        cropper.destroy();
        cropper = null;
    }
}

// Close modal when clicking outside
document.addEventListener('click', function(event) {
    const modal = document.getElementById('cropperModal');
    const modalContent = document.querySelector('.cropper-content');
    if (event.target === modal) {
        closeCropperModal();
    }
});

function zoomIn() {
    if (cropper) {
        cropper.zoom(0.1);
    }
}

function zoomOut() {
    if (cropper) {
        cropper.zoom(-0.1);
    }
}

function rotateImage() {
    if (cropper) {
        cropper.rotate(90);
    }
}

function cropImage() {
    if (cropper) {
        const canvas = cropper.getCroppedCanvas({
            width: 800,
            height: 800,
            imageSmoothingEnabled: true,
            imageSmoothingQuality: 'high',
        });

        canvas.toBlob((blob) => {
            // Create a new File object
            const croppedFile = new File([blob], 'cropped-image.jpg', { type: 'image/jpeg' });
            
            // Update the file input and preview
            const input = document.getElementById(`input${currentImageBox}`);
            const preview = document.getElementById(`imgView${currentImageBox}`);
            
            // Create a FileList-like object
            const dataTransfer = new DataTransfer();
            dataTransfer.items.add(croppedFile);
            input.files = dataTransfer.files;
            
            // Update preview
            preview.src = URL.createObjectURL(croppedFile);
            
            // Close modal
            closeCropperModal();
        }, 'image/jpeg', 0.9);
    }
}
</script>

<%- include("../../views/partials/admin/footer") %>
