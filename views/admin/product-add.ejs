<%- include("../../views/partials/admin/header") %>
<head>
   <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css">
   <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
   <script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script>
</head>
<style>
   :root {
       --primary-color: #B5D8CC;
       --secondary-color: #E8B4BC;
       --accent-color: #FFD9C0;
       --background-light: #F8F6F4;
       --text-primary: #6B7B8C;
       --danger-color: #FFB4B4;
   }

   .content-main {
       padding: 2rem;
       background: var(--background-light);
   }

   .content-header {
       margin-bottom: 2rem;
   }

   .content-title {
       color: var(--text-primary);
       font-size: 1.8rem;
       font-weight: 600;
       margin-bottom: 0.5rem;
   }

   .card {
       background: white;
       border-radius: 15px;
       border: 1px solid rgba(0,0,0,0.05);
       box-shadow: 0 5px 15px rgba(0,0,0,0.05);
       transition: transform 0.3s ease, box-shadow 0.3s ease;
   }

   .card:hover {
       transform: translateY(-5px);
       box-shadow: 0 8px 25px rgba(0,0,0,0.1);
   }

   .card-header {
       background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
       color: white;
       border-radius: 15px 15px 0 0;
       padding: 1.5rem;
   }

   .card-body {
       padding: 2rem;
   }

   .form-label {
       color: var(--text-primary);
       font-weight: 500;
       margin-bottom: 0.5rem;
   }

   .form-control {
       border-radius: 10px;
       border: 1px solid rgba(0,0,0,0.1);
       padding: 0.8rem;
       transition: all 0.3s ease;
   }

   .form-control:focus {
       box-shadow: 0 0 0 3px rgba(181, 216, 204, 0.3);
       border-color: var(--primary-color);
   }

   .form-select {
       border-radius: 10px;
       border: 1px solid rgba(0,0,0,0.1);
       padding: 0.8rem;
       background-color: white;
       transition: all 0.3s ease;
   }

   .form-select:focus {
       box-shadow: 0 0 0 3px rgba(181, 216, 204, 0.3);
       border-color: var(--primary-color);
   }

   .error-message {
       color: #dc3545;
       font-size: 13px;
       margin-top: 5px;
       display: block;
   }

   .form-control.is-invalid,
   .form-select.is-invalid {
       border-color: #dc3545 !important;
   }

   .form-control.is-invalid:focus,
   .form-select.is-invalid:focus {
       border-color: #dc3545 !important;
       box-shadow: 0 0 0 0.25rem rgba(220, 53, 69, 0.25);
   }

   .mb-4 {
       margin-bottom: 1.5rem;
   }

   /* Make sure error messages are visible */
   small.text-danger {
       display: block;
       margin-top: 5px;
       font-size: 13px;
   }

   .thumbnails-container {
       display: flex;
       gap: 1rem;
       padding: 1rem;
       overflow-x: auto;
       scrollbar-width: thin;
       scrollbar-color: var(--secondary-color) var(--background-light);
   }

   .thumbnail {
       flex: 0 0 auto;
       border-radius: 10px;
       overflow: hidden;
       box-shadow: 0 3px 10px rgba(0,0,0,0.1);
       transition: transform 0.3s ease;
   }

   .thumbnail:hover {
       transform: scale(1.05);
   }

   .image-upload-container {
       border: 2px dashed var(--primary-color);
       border-radius: 10px;
       padding: 2rem;
       text-align: center;
       transition: all 0.3s ease;
   }

   .image-upload-container:hover {
       background: rgba(181, 216, 204, 0.1);
   }

   .btn-primary {
       background: var(--primary-color);
       border: none;
       border-radius: 10px;
       padding: 0.8rem 1.5rem;
       color: white;
       font-weight: 500;
       transition: all 0.3s ease;
   }

   .btn-primary:hover {
       background: var(--secondary-color);
       transform: translateY(-2px);
   }

   /* Custom scrollbar */
   ::-webkit-scrollbar {
       width: 8px;
       height: 8px;
   }

   ::-webkit-scrollbar-track {
       background: var(--background-light);
       border-radius: 4px;
   }

   ::-webkit-scrollbar-thumb {
       background: var(--secondary-color);
       border-radius: 4px;
   }

   ::-webkit-scrollbar-thumb:hover {
       background: var(--primary-color);
   }

   /* Image preview animations */
   @keyframes fadeIn {
       from { opacity: 0; transform: scale(0.9); }
       to { opacity: 1; transform: scale(1); }
   }

   .imgView {
       max-width: 100%;
       border-radius: 10px;
       animation: fadeIn 0.3s ease-out;
   }

   /* Responsive adjustments */
   @media (max-width: 768px) {
       .content-main {
           padding: 1rem;
       }

       .card-body {
           padding: 1.5rem;
       }
   }

   /* Image Upload Styles */
   .image-upload-grid {
       display: grid;
       grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
       gap: 20px;
       margin-bottom: 20px;
   }

   .image-upload-box {
       position: relative;
       width: 100%;
       padding-top: 100%;
       border: 2px dashed var(--primary-color);
       border-radius: 8px;
       background: rgba(181, 216, 204, 0.05);
       transition: all 0.3s ease;
   }

   .image-upload-box:hover {
       border-color: var(--secondary-color);
       background: rgba(181, 216, 204, 0.1);
   }

   .preview-container {
       position: absolute;
       top: 0;
       left: 0;
       width: 100%;
       height: 100%;
       display: none;
   }

   .preview-container.has-image {
       display: block;
   }

   .preview-image {
       width: 100%;
       height: 100%;
       object-fit: cover;
       border-radius: 6px;
   }

   .upload-content {
       position: absolute;
       top: 0;
       left: 0;
       width: 100%;
       height: 100%;
       display: flex;
       flex-direction: column;
       align-items: center;
       justify-content: center;
       text-align: center;
       padding: 20px;
   }

   .upload-icon {
       font-size: 40px;
       color: var(--primary-color);
       margin-bottom: 10px;
   }

   .upload-text h5 {
       margin: 0;
       color: #333;
       font-size: 16px;
   }

   .upload-text p {
       margin: 5px 0 0;
       color: #666;
       font-size: 14px;
   }

   .image-input {
       position: absolute;
       width: 100%;
       height: 100%;
       top: 0;
       left: 0;
       opacity: 0;
       cursor: pointer;
   }

   .remove-image {
       position: absolute;
       top: 5px;
       right: 5px;
       background: var(--danger-color);
       color: white;
       border: none;
       border-radius: 50%;
       width: 25px;
       height: 25px;
       display: flex;
       align-items: center;
       justify-content: center;
       cursor: pointer;
       transition: all 0.2s ease;
       z-index: 10;
       padding: 0;
   }

   .remove-image:hover {
       background: #ff8a8a;
       transform: scale(1.1);
   }

   .remove-image i {
       font-size: 14px;
       line-height: 1;
   }

   /* Image Cropper Styles */
   .modal {
       display: none;
       position: fixed;
       z-index: 9999;
       left: 0;
       top: 0;
       width: 100%;
       height: 100%;
       background-color: rgba(0, 0, 0, 0.5);
   }

   .cropper-content {
       position: relative;
       background-color: #fefefe;
       margin: 2% auto;
       padding: 20px;
       width: 90%;
       max-width: 1000px;
       border-radius: 8px;
   }

   .cropper-container {
       background: #ffffff;
       border: 1px solid #ddd;
       border-radius: 8px;
       overflow: hidden;
       margin-bottom: 20px;
       height: 70vh;
   }

   #cropperImage {
       max-width: 100%;
       max-height: 100%;
       display: block;
   }

   .cropper-actions {
       background: #f8f9fa;
       padding: 15px;
       border-radius: 8px;
       display: flex;
       gap: 10px;
       justify-content: center;
       flex-wrap: wrap;
   }

   .cropper-actions button {
       min-width: 120px;
       padding: 10px 20px;
       border: none;
       border-radius: 5px;
       cursor: pointer;
       font-weight: 500;
       font-size: 14px;
       display: flex;
       align-items: center;
       justify-content: center;
       gap: 8px;
       background-color: var(--primary-color);
       color: white;
   }

   .cropper-actions button i {
       font-size: 16px;
   }

   /* Override Cropper.js styles */
   .cropper-view-box,
   .cropper-face {
       border-radius: 0;
   }

   .cropper-bg {
       background-image: none !important;
       background-color: #ffffff !important;
   }

   .cropper-modal {
       opacity: 1 !important;
       background: white !important;
   }

   .cropper-container {
       background: white !important;
   }
</style>
<section class="content-main">
   <div class="row">
       <div class="col-9">
           <div class="content-header">
               <h2 class="content-title">Add New Product</h2>
           </div>
       </div>
       <div class="col-lg-12">
           <div class="card mb-4">
               <div class="card-body">
                   <form id="productForm" enctype="multipart/form-data">
                       <div class="mb-4">
                           <label for="product_name" class="form-label">Product Name</label>
                           <input type="text" placeholder="Type here" name="productName" class="form-control" id="product_name">
                           <small class="text-danger error-message" id="product_name-error"></small>
                       </div>

                       <div class="mb-4">
                           <label for="descriptionid" class="form-label">Description</label>
                           <textarea placeholder="Type here" name="description" class="form-control" id="descriptionid" rows="4"></textarea>
                           <small class="text-danger error-message" id="descriptionid-error"></small>
                       </div>

                       <div class="row">
                           <div class="col-lg-4">
                               <div class="mb-4">
                                   <label for="regularPrice" class="form-label">Regular Price</label>
                                   <input type="number" placeholder="₹" name="regularPrice" class="form-control" id="regularPrice">
                                   <small class="text-danger error-message" id="regularPrice-error"></small>
                               </div>
                           </div>
                           <div class="col-lg-4">
                               <div class="mb-4">
                                   <label for="salesPrice" class="form-label">Sale Price</label>
                                   <input type="number" placeholder="₹" name="salesPrice" class="form-control" id="salesPrice">
                                   <small class="text-danger error-message" id="salesPrice-error"></small>
                               </div>
                           </div>
                           <div class="col-lg-4">
                               <div class="mb-4">
                                   <label for="quantity" class="form-label">Quantity</label>
                                   <input type="number" placeholder="Quantity" name="quantity" class="form-control" id="quantity">
                                   <small class="text-danger error-message" id="quantity-error"></small>
                               </div>
                           </div>
                       </div>

                       <div class="row">
                           <div class="col-lg-4">
                               <div class="mb-4">
                                   <label for="color" class="form-label">Color</label>
                                   <input type="text" name="color" class="form-control" id="color">
                                   <small class="text-danger error-message" id="color-error"></small>
                               </div>
                           </div>
                           <div class="col-lg-4">
                               <div class="mb-4">
                                   <label for="category" class="form-label">Category</label>
                                   <select class="form-select" name="category" id="category">
                                       <option value="">Select Category</option>
                                       <% for(let i=0; i<cat.length; i++) { %>
                                           <option value="<%=cat[i]._id%>"><%=cat[i].name%></option>
                                       <% } %>
                                   </select>
                                   <small class="text-danger error-message" id="category-error"></small>
                               </div>
                           </div>
                       </div>

                       <div class="card mb-4">
                           <div class="card-header">
                               <h4>Product Images</h4>
                               <p class="text-muted">Upload up to 3 images of your product</p>
                           </div>
                           <div class="card-body">
                               <div class="image-upload-grid">
                                   <div class="image-upload-box" id="upload-box-1">
                                       <div class="preview-container" id="preview-1">
                                           <img src="" alt="" id="imgView1" class="preview-image">
                                       </div>
                                       <div class="upload-content">
                                           <i class="material-icons upload-icon">cloud_upload</i>
                                           <div class="upload-text">
                                               <h5>Drop image here</h5>
                                               <p>or click to browse</p>
                                           </div>
                                           <input class="form-control image-input" type="file" name="images" id="input1"
                                               accept="image/png, image/jpeg, image/jpg" onchange="viewImage1(event)">
                                       </div>
                                   </div>

                                   <div class="image-upload-box" id="upload-box-2">
                                       <div class="preview-container" id="preview-2">
                                           <img src="" alt="" id="imgView2" class="preview-image">
                                       </div>
                                       <div class="upload-content">
                                           <i class="material-icons upload-icon">cloud_upload</i>
                                           <div class="upload-text">
                                               <h5>Drop image here</h5>
                                               <p>or click to browse</p>
                                           </div>
                                           <input class="form-control image-input" type="file" name="images" id="input2"
                                               accept="image/png, image/jpeg, image/jpg" onchange="viewImage2(event)">
                                       </div>
                                   </div>

                                   <div class="image-upload-box" id="upload-box-3">
                                       <div class="preview-container" id="preview-3">
                                           <img src="" alt="" id="imgView3" class="preview-image">
                                       </div>
                                       <div class="upload-content">
                                           <i class="material-icons upload-icon">cloud_upload</i>
                                           <div class="upload-text">
                                               <h5>Drop image here</h5>
                                               <p>or click to browse</p>
                                           </div>
                                           <input class="form-control image-input" type="file" name="images" id="input3"
                                               accept="image/png, image/jpeg, image/jpg" onchange="viewImage3(event)">
                                       </div>
                                   </div>
                               </div>
                               <small class="text-danger error-message" id="images-error"></small>
                           </div>
                       </div>

                       <div class="text-end">
                           <button type="submit" class="btn btn-primary">Add Product</button>
                       </div>
                   </form>
               </div>
           </div>
       </div>
   </div>
</section>

<!-- Image Cropper Modal -->
<div id="cropperModal" class="modal">
    <div class="cropper-content">
        <div class="cropper-container">
            <img id="cropperImage" src="" alt="Image to crop">
        </div>
        <div class="cropper-actions">
            <button type="button" class="btn btn-primary" onclick="zoomOut()">
                <i class="fas fa-search-minus"></i> Zoom Out
            </button>
            <button type="button" class="btn btn-primary" onclick="zoomIn()">
                <i class="fas fa-search-plus"></i> Zoom In
            </button>
            <button type="button" class="btn btn-primary" onclick="rotate()">
                <i class="fas fa-redo"></i> Rotate
            </button>
            <button type="button" class="btn btn-primary" onclick="cropImage()">
                <i class="fas fa-crop"></i> Crop & Save
            </button>
            <button type="button" class="btn btn-primary" onclick="closeCropperModal()">
                <i class="fas fa-times"></i> Cancel
            </button>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
// Function to handle image preview for each input
function viewImage1(event) {
    const file = event.target.files[0];
    const preview = document.getElementById('imgView1');
    const previewContainer = document.getElementById('preview-1');
    handleImagePreview(file, preview, previewContainer, 1);
}

function viewImage2(event) {
    const file = event.target.files[0];
    const preview = document.getElementById('imgView2');
    const previewContainer = document.getElementById('preview-2');
    handleImagePreview(file, preview, previewContainer, 2);
}

function viewImage3(event) {
    const file = event.target.files[0];
    const preview = document.getElementById('imgView3');
    const previewContainer = document.getElementById('preview-3');
    handleImagePreview(file, preview, previewContainer, 3);
}

// Common function to handle image preview
function handleImagePreview(file, preview, previewContainer, boxNumber) {
    if (file) {
        const reader = new FileReader();
        reader.onload = function(e) {
            preview.src = e.target.result;
            preview.style.display = 'block';
            previewContainer.classList.add('has-image');
            
            // Add remove button if it doesn't exist
            if (!previewContainer.querySelector('.remove-image')) {
                const removeBtn = document.createElement('button');
                removeBtn.className = 'remove-image';
                removeBtn.innerHTML = '<i class="fas fa-times"></i>';
                removeBtn.onclick = function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    removeImage(boxNumber);
                };
                previewContainer.appendChild(removeBtn);
            }

            // Open cropper modal
            openCropperModal(boxNumber, e.target.result);
        };
        reader.readAsDataURL(file);
    }
}

let cropper = null;
let currentImageBox = null;

function openCropperModal(boxNumber, imageUrl) {
    currentImageBox = boxNumber;
    const modal = document.getElementById('cropperModal');
    const image = document.getElementById('cropperImage');
    
    modal.style.display = 'block';
    image.src = imageUrl;
    
    if (cropper) {
        cropper.destroy();
    }
    
    cropper = new Cropper(image, {
        aspectRatio: 1,
        viewMode: 2,
        dragMode: 'move',
        autoCropArea: 0.8,
        restore: false,
        guides: true,
        center: true,
        highlight: false,
        cropBoxMovable: true,
        cropBoxResizable: true,
        toggleDragModeOnDblclick: true,
        background: false,
        modal: false,
        checkCrossOrigin: false,
        zoomable: true,
        scalable: true,
        rotatable: true,
        responsive: true,
        checkOrientation: true,
        minContainerWidth: 200,
        minContainerHeight: 100,
    });

    // Force white background
    document.querySelector('.cropper-modal').style.backgroundColor = '#ffffff';
    document.querySelector('.cropper-canvas').style.backgroundColor = '#ffffff';
    document.querySelector('.cropper-view-box').style.backgroundColor = '#ffffff';
}

function closeCropperModal() {
    const modal = document.getElementById('cropperModal');
    modal.style.display = 'none';
    if (cropper) {
        cropper.destroy();
        cropper = null;
    }
}

// Close modal when clicking outside
document.addEventListener('click', function(event) {
    const modal = document.getElementById('cropperModal');
    const modalContent = document.querySelector('.cropper-content');
    if (event.target === modal) {
        closeCropperModal();
    }
});

function zoomIn() {
    if (cropper) {
        cropper.zoom(0.1);
    }
}

function zoomOut() {
    if (cropper) {
        cropper.zoom(-0.1);
    }
}

function rotate() {
    if (cropper) {
        cropper.rotate(90);
    }
}

function cropImage() {
    if (cropper) {
        const canvas = cropper.getCroppedCanvas({
            width: 800,
            height: 800,
            imageSmoothingEnabled: true,
            imageSmoothingQuality: 'high',
        });

        canvas.toBlob((blob) => {
            // Create a new File object
            const croppedFile = new File([blob], 'cropped-image.jpg', { type: 'image/jpeg' });
            
            // Update the file input and preview
            const input = document.getElementById(`input${currentImageBox}`);
            const preview = document.getElementById(`imgView${currentImageBox}`);
            
            // Create a FileList-like object
            const dataTransfer = new DataTransfer();
            dataTransfer.items.add(croppedFile);
            input.files = dataTransfer.files;
            
            // Update preview
            preview.src = URL.createObjectURL(croppedFile);
            
            // Close modal
            closeCropperModal();
        }, 'image/jpeg', 0.9);
    }
}

// Function to remove image
function removeImage(boxNumber) {
    event.preventDefault();
    event.stopPropagation();
    
    Swal.fire({
        title: 'Delete Image?',
        text: 'Are you sure you want to remove this image?',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#d33',
        cancelButtonColor: '#3085d6',
        confirmButtonText: 'Yes, delete it!',
        cancelButtonText: 'Cancel'
    }).then((result) => {
        if (result.isConfirmed) {
            const previewContainer = document.getElementById(`preview-${boxNumber}`);
            const input = document.getElementById(`input${boxNumber}`);
            const imgView = document.getElementById(`imgView${boxNumber}`);

            previewContainer.classList.remove('has-image');
            imgView.src = '';
            imgView.style.display = 'none';
            input.value = ''; // Clear the file input

            // Remove the remove button
            const removeBtn = previewContainer.querySelector('.remove-image');
            if (removeBtn) {
                removeBtn.remove();
            }

            Swal.fire({
                title: 'Deleted!',
                text: 'Image has been removed.',
                icon: 'success',
                timer: 1500,
                showConfirmButton: false
            });
        }
    });
}

// Single form validation and submission handler
document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('productForm');
    let isSubmitting = false;

    // Function to show error messages
    function showError(input, errorId, message) {
        input.classList.add('is-invalid');
        document.getElementById(errorId).textContent = message;
    }

    // Function to clear error messages
    function clearError(input, errorId) {
        input.classList.remove('is-invalid');
        document.getElementById(errorId).textContent = '';
    }

    // Add real-time validation for each input
    const validations = [
        {
            field: 'productName',
            inputId: 'product_name',
            errorId: 'product_name-error',
            message: 'Product name is required',
            validate: value => value && value.trim() !== ''
        },
        {
            field: 'description',
            inputId: 'descriptionid',
            errorId: 'descriptionid-error',
            message: 'Description is required',
            validate: value => value && value.trim() !== ''
        },
        {
            field: 'regularPrice',
            inputId: 'regularPrice',
            errorId: 'regularPrice-error',
            message: 'Regular price must be greater than 0',
            validate: value => value && value > 0
        },
        {
            field: 'salesPrice',
            inputId: 'salesPrice',
            errorId: 'salesPrice-error',
            message: 'Sales price must be greater than 0',
            validate: value => value && value > 0
        },
        {
            field: 'quantity',
            inputId: 'quantity',
            errorId: 'quantity-error',
            message: 'Quantity must be 0 or greater',
            validate: value => value !== '' && value >= 0
        },
        {
            field: 'color',
            inputId: 'color',
            errorId: 'color-error',
            message: 'Color is required',
            validate: value => value && value.trim() !== ''
        },
        {
            field: 'category',
            inputId: 'category',
            errorId: 'category-error',
            message: 'Please select a category',
            validate: value => value && value !== ''
        }
    ];

    validations.forEach(validation => {
        const input = form.querySelector(`#${validation.inputId}`);
        if (input) {
            input.addEventListener('input', function() {
                const value = this.value;
                if (validation.validate(value)) {
                    clearError(this, validation.errorId);
                }
            });
        }
    });

    form.addEventListener('submit', async function(e) {
        e.preventDefault();
        if (isSubmitting) return;
        isSubmitting = true;

        // Get form data
        const formData = new FormData(this);
        let isValid = true;

        // Validation checks
        validations.forEach(validation => {
            const value = formData.get(validation.field);
            if (!validation.validate(value)) {
                showError(
                    form.querySelector(`#${validation.inputId}`),
                    validation.errorId,
                    validation.message
                );
                isValid = false;
            } else {
                clearError(
                    form.querySelector(`#${validation.inputId}`),
                    validation.errorId
                );
            }
        });

        // Image validation
        const imageInputs = form.querySelectorAll('input[type="file"]');
        let imageCount = 0;
        for (const input of imageInputs) {
            if (input.files && input.files.length > 0) {
                imageCount++;
                const file = input.files[0];
                
                if (!['image/jpeg', 'image/jpg', 'image/png'].includes(file.type)) {
                    document.getElementById('images-error').textContent = 'Please upload only JPG or PNG images';
                    isValid = false;
                    break;
                }
                
                if (file.size > 5 * 1024 * 1024) {
                    document.getElementById('images-error').textContent = 'Image size should be less than 5MB';
                    isValid = false;
                    break;
                }
            }
        }

        if (imageCount !== 3) {
            document.getElementById('images-error').textContent = 'Please upload exactly 3 product images';
            isValid = false;
        } else {
            document.getElementById('images-error').textContent = '';
        }

        if (!isValid) {
            console.log('Validation failed');
            isSubmitting = false;
            return;
        }

        try {
            console.log('Submitting form data');
            const response = await fetch('/admin/addProducts', {
                method: 'POST',
                body: formData
            });
            
            const data = await response.json();
            console.log('Server response:', data);
            
            if (data.status === false) {
                document.getElementById('images-error').textContent = data.message || 'Error adding product';
                isSubmitting = false;
            } else {
                window.location.href = '/admin/products';
            }
        } catch (error) {
            console.error('Submission error:', error);
            document.getElementById('images-error').textContent = 'An error occurred while uploading the product';
            isSubmitting = false;
        }
    });

    // Image preview handlers
    const imageInputs = document.querySelectorAll('.image-upload');
    imageInputs.forEach((input, index) => {
        input.addEventListener('change', function(e) {
            const file = e.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    const preview = document.querySelector(`#preview${index + 1}`);
                    if (preview) {
                        preview.src = e.target.result;
                        preview.style.display = 'block';
                    }
                };
                reader.readAsDataURL(file);
            }
        });
    });

    // Reset image preview when clicked
    const previews = document.querySelectorAll('.preview-image');
    previews.forEach((preview, index) => {
        preview.addEventListener('click', function() {
            const input = document.querySelector(`#image${index + 1}`);
            if (input) {
                input.value = '';
                preview.src = '/uploads/placeholder.png';
            }
        });
    });
});
</script>

<%- include("../../views/partials/admin/footer") %>
